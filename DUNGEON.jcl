//DNGN JOB (JOB),
//             'Build CICS Dungeon',
//             CLASS=A,
//             MSGCLASS=A,
//             MSGLEVEL=(1,1),
//             USER=IBMUSER,
//             PASSWORD=SYS1,
//             REGION=7000K,
//             NOTIFY=IBMUSER
//*
//* This JCL was built for use with the MVS/CE KICKS docker
//* container. If you're using this with a default KICKS
//* install make sure you update the following items
//* 
//* The KICKS HLQ is currently: KICKS
//* The LOADLIB with PDSLOAD: SYSC.LINKLIB
//* The HLQ for the GCC compiler: GCC
//* The PDP C Lib location: PDPCLIB
//*
//* Container: https://hub.docker.com/r/mainframed767/kicks
//*
//JOBPROC  DD DSN=KICKS.KICKSSYS.V1R5M0.PROCLIB,DISP=SHR 
//* Adding DEATH
//DEATH EXEC PGM=IEFBR14  
//DEATH EXEC KIKMAPS,MAPNAME=DEATH
//COPY.SYSUT1 DD DATA,DLM=@@
* HLASM BMS Map from DEATH.ans
* Generated using ansi_to_bms.py by Philip Young
* Generated on: 2023-10-09 16:06:43
CICSMAP  TITLE 'Autogenerated BMS'
         PRINT NOGEN
DEATH    DFHMSD TYPE=&SYSPARM,                                         X
               MODE=INOUT,                                             X
               LANG=COBOL,                                             X
               DSATTS=(COLOR,HILIGHT),MAPATTS=(COLOR,HILIGHT),         X
               TIOAPFX=YES,                                            X
               CTRL=FREEKB,STORAGE=AUTO    
* Below is the MAP name, you use this in COBOL to reference the MAP
* You could have more than one map, hence size/line/column
DEATH1   DFHMDI SIZE=(24,80),                                          X
               LINE=1,                                                 X
               COLUMN=1
*
         DFHMDF POS=(03,17),                                           X
               LENGTH=09,                                              X
               COLOR=NEUTRAL,                                          X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='.-"""""-.'
*
         DFHMDF POS=(04,14),                                           X
               LENGTH=03,                                              X
               COLOR=NEUTRAL,                                          X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='.-"'
*
         DFHMDF POS=(04,19),                                           X
               LENGTH=05,                                              X
               COLOR=NEUTRAL,                                          X
               ATTRB=(NORM,PROT),                                      X
               INITIAL=':::::'
*
         DFHMDF POS=(04,26),                                           X
               LENGTH=03,                                              X
               COLOR=NEUTRAL,                                          X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='`-.'
*
         DFHMDF POS=(05,11),                                           X
               LENGTH=03,                                              X
               COLOR=NEUTRAL,                                          X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='.-"'
*
         DFHMDF POS=(05,16),                                           X
               LENGTH=11,                                              X
               COLOR=NEUTRAL,                                          X
               ATTRB=(NORM,PROT),                                      X
               INITIAL=':::::_:::::'
*
         DFHMDF POS=(05,29),                                           X
               LENGTH=03,                                              X
               COLOR=NEUTRAL,                                          X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='"-.'
*
         DFHMDF POS=(06,07),                                           X
               LENGTH=04,                                              X
               COLOR=NEUTRAL,                                          X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='___/'
*
         DFHMDF POS=(06,12),                                           X
               LENGTH=19,                                              X
               COLOR=NEUTRAL,                                          X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='==:...:::-:::...:=='
*
         DFHMDF POS=(06,32),                                           X
               LENGTH=04,                                              X
               COLOR=NEUTRAL,                                          X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='\___'
*
         DFHMDF POS=(07,06),                                           X
               LENGTH=31,                                              X
               COLOR=NEUTRAL,                                          X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='/_____________________________\'
*
         DFHMDF POS=(08,06),                                           X
               LENGTH=31,                                              X
               COLOR=NEUTRAL,                                          X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='"-._________________________.-"'
*
         DFHMDF POS=(08,46),                                           X
               LENGTH=05,                                              X
               COLOR=BLUE,                                             X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='Press'
*
         DFHMDF POS=(08,52),                                           X
               LENGTH=05,                                              X
               COLOR=BLUE,                                             X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='Enter'
*
         DFHMDF POS=(08,58),                                           X
               LENGTH=02,                                              X
               COLOR=BLUE,                                             X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='to'
*
         DFHMDF POS=(08,61),                                           X
               LENGTH=08,                                              X
               COLOR=BLUE,                                             X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='Continue'
         DFHMDF POS=(09,46),                                           X
               LENGTH=16,                                              X
               COLOR=BLUE,                                             X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='Press F5 to Quit'
*
         DFHMDF POS=(09,09),                                           X
               LENGTH=01,                                              X
               COLOR=NEUTRAL,                                          X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='\'
*
         DFHMDF POS=(09,11),                                           X
               LENGTH=21,                                              X
               COLOR=NEUTRAL,                                          X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='@-,`-[-][-^-][-]-`,-@'
*
         DFHMDF POS=(09,33),                                           X
               LENGTH=01,                                              X
               COLOR=NEUTRAL,                                          X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='/'
*
         DFHMDF POS=(10,09),                                           X
               LENGTH=01,                                              X
               COLOR=NEUTRAL,                                          X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='|'
*
         DFHMDF POS=(10,11),                                           X
               LENGTH=21,                                              X
               COLOR=NEUTRAL,                                          X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='.-------------------.'
*
         DFHMDF POS=(10,33),                                           X
               LENGTH=01,                                              X
               COLOR=NEUTRAL,                                          X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='|'
*
         DFHMDF POS=(11,09),                                           X
               LENGTH=03,                                              X
               COLOR=NEUTRAL,                                          X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='|=|'
*
         DFHMDF POS=(11,15),                                           X
               LENGTH=04,                                              X
               COLOR=NEUTRAL,                                          X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='REST'
*
         DFHMDF POS=(11,20),                                           X
               LENGTH=02,                                              X
               COLOR=NEUTRAL,                                          X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='IN'
*
         DFHMDF POS=(11,23),                                           X
               LENGTH=05,                                              X
               COLOR=NEUTRAL,                                          X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='PEACE'
*
         DFHMDF POS=(11,31),                                           X
               LENGTH=03,                                              X
               COLOR=NEUTRAL,                                          X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='|=|'
*
         DFHMDF POS=(12,09),                                           X
               LENGTH=01,                                              X
               COLOR=NEUTRAL,                                          X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='|'
*
         DFHMDF POS=(12,11),                                           X
               LENGTH=01,                                              X
               COLOR=NEUTRAL,                                          X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='|'
*
NAMED    DFHMDF POS=(12,13),                                           X
               LENGTH=17,                                              X
               COLOR=RED,                                              X
               ATTRB=(NORM,PROT)
*
         DFHMDF POS=(12,31),                                           X
               LENGTH=01,                                              X
               COLOR=NEUTRAL,                                          X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='|'
*
         DFHMDF POS=(12,33),                                           X
               LENGTH=01,                                              X
               COLOR=NEUTRAL,                                          X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='|'
*
         DFHMDF POS=(13,09),                                           X
               LENGTH=03,                                              X
               COLOR=NEUTRAL,                                          X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='|=|'
*
         DFHMDF POS=(13,31),                                           X
               LENGTH=03,                                              X
               COLOR=NEUTRAL,                                          X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='|=|'
*
         DFHMDF POS=(14,09),                                           X
               LENGTH=01,                                              X
               COLOR=NEUTRAL,                                          X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='|'
*
         DFHMDF POS=(14,11),                                           X
               LENGTH=01,                                              X
               COLOR=NEUTRAL,                                          X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='|'
*
         DFHMDF POS=(14,15),                                           X
               LENGTH=06,                                              X
               COLOR=NEUTRAL,                                          X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='Killed'
*
         DFHMDF POS=(14,22),                                           X
               LENGTH=02,                                              X
               COLOR=NEUTRAL,                                          X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='by'
*
         DFHMDF POS=(14,25),                                           X
               LENGTH=02,                                              X
               COLOR=NEUTRAL,                                          X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='a'
*
         DFHMDF POS=(14,31),                                           X
               LENGTH=01,                                              X
               COLOR=NEUTRAL,                                          X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='|'
*
         DFHMDF POS=(14,33),                                           X
               LENGTH=01,                                              X
               COLOR=NEUTRAL,                                          X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='|'
*
         DFHMDF POS=(15,09),                                           X
               LENGTH=03,                                              X
               COLOR=NEUTRAL,                                          X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='|=|'
*
KILLED   DFHMDF POS=(15,13),                                           X
               LENGTH=17,                                              X
               COLOR=GREEN,                                            X
               ATTRB=(NORM,PROT)
*
         DFHMDF POS=(15,31),                                           X
               LENGTH=03,                                              X
               COLOR=NEUTRAL,                                          X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='|=|'
*
         DFHMDF POS=(16,09),                                           X
               LENGTH=01,                                              X
               COLOR=NEUTRAL,                                          X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='|'
*
         DFHMDF POS=(16,11),                                           X
               LENGTH=01,                                              X
               COLOR=NEUTRAL,                                          X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='|'
*
DATE     DFHMDF POS=(16,17),                                           X
               LENGTH=11,                                              X
               COLOR=RED,                                              X
               ATTRB=(NORM,PROT)
*
         DFHMDF POS=(16,31),                                           X
               LENGTH=01,                                              X
               COLOR=NEUTRAL,                                          X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='|'
*
         DFHMDF POS=(16,33),                                           X
               LENGTH=01,                                              X
               COLOR=NEUTRAL,                                          X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='|'
*
         DFHMDF POS=(16,43),                                           X
               LENGTH=05,                                              X
               COLOR=NEUTRAL,                                          X
               ATTRB=(NORM,PROT),                                      X
               INITIAL=',-=-.'
*
         DFHMDF POS=(16,57),                                           X
               LENGTH=06,                                              X
               COLOR=NEUTRAL,                                          X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='______'
*
         DFHMDF POS=(16,70),                                           X
               LENGTH=01,                                              X
               COLOR=NEUTRAL,                                          X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='_'
*
         DFHMDF POS=(17,09),                                           X
               LENGTH=03,                                              X
               COLOR=NEUTRAL,                                          X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='|=|'
*
         DFHMDF POS=(17,31),                                           X
               LENGTH=03,                                              X
               COLOR=NEUTRAL,                                          X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='|=|'
*
         DFHMDF POS=(17,42),                                           X
               LENGTH=01,                                              X
               COLOR=NEUTRAL,                                          X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='/'
*
         DFHMDF POS=(17,45),                                           X
               LENGTH=01,                                              X
               COLOR=NEUTRAL,                                          X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='+'
*
         DFHMDF POS=(17,48),                                           X
               LENGTH=01,                                              X
               COLOR=NEUTRAL,                                          X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='\'
*
         DFHMDF POS=(17,56),                                           X
               LENGTH=08,                                              X
               COLOR=NEUTRAL,                                          X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='/>----->'
*
         DFHMDF POS=(17,68),                                           X
               LENGTH=01,                                              X
               COLOR=NEUTRAL,                                          X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='/'
*
         DFHMDF POS=(17,72),                                           X
               LENGTH=01,                                              X
               COLOR=NEUTRAL,                                          X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='\'
*
         DFHMDF POS=(18,09),                                           X
               LENGTH=01,                                              X
               COLOR=NEUTRAL,                                          X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='|'
*
         DFHMDF POS=(18,11),                                           X
               LENGTH=21,                                              X
               COLOR=NEUTRAL,                                          X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='"-------------------"'
*
         DFHMDF POS=(18,33),                                           X
               LENGTH=01,                                              X
               COLOR=NEUTRAL,                                          X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='|'
*
         DFHMDF POS=(18,42),                                           X
               LENGTH=01,                                              X
               COLOR=NEUTRAL,                                          X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='|'
*
         DFHMDF POS=(18,44),                                           X
               LENGTH=03,                                              X
               COLOR=NEUTRAL,                                          X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='~~~'
*
         DFHMDF POS=(18,48),                                           X
               LENGTH=01,                                              X
               COLOR=NEUTRAL,                                          X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='|'
*
         DFHMDF POS=(18,55),                                           X
               LENGTH=02,                                              X
               COLOR=NEUTRAL,                                          X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='//'
*
         DFHMDF POS=(18,59),                                           X
               LENGTH=01,                                              X
               COLOR=NEUTRAL,                                          X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='/'
*
         DFHMDF POS=(18,62),                                           X
               LENGTH=01,                                              X
               COLOR=NEUTRAL,                                          X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='/'
*
         DFHMDF POS=(18,67),                                           X
               LENGTH=01,                                              X
               COLOR=NEUTRAL,                                          X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='|'
*
         DFHMDF POS=(18,69),                                           X
               LENGTH=01,                                              X
               COLOR=NEUTRAL,                                          X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='C'
*
         DFHMDF POS=(18,71),                                           X
               LENGTH=01,                                              X
               COLOR=NEUTRAL,                                          X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='D'
*
         DFHMDF POS=(18,73),                                           X
               LENGTH=01,                                              X
               COLOR=NEUTRAL,                                          X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='|'
*
         DFHMDF POS=(19,01),                                           X
               LENGTH=01,                                              X
               COLOR=RED,                                              X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='*'
*
         DFHMDF POS=(19,05),                                           X
               LENGTH=01,                                              X
               COLOR=YELLOW,                                           X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='*'
*
         DFHMDF POS=(19,09),                                           X
               LENGTH=25,                                              X
               COLOR=NEUTRAL,                                          X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='|_______________________|'
*
         DFHMDF POS=(19,42),                                           X
               LENGTH=01,                                              X
               COLOR=NEUTRAL,                                          X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='|'
*
         DFHMDF POS=(19,44),                                           X
               LENGTH=03,                                              X
               COLOR=NEUTRAL,                                          X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='SoF'
*
         DFHMDF POS=(19,48),                                           X
               LENGTH=01,                                              X
               COLOR=NEUTRAL,                                          X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='|'
*
         DFHMDF POS=(19,54),                                           X
               LENGTH=02,                                              X
               COLOR=NEUTRAL,                                          X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='//'
*
         DFHMDF POS=(19,58),                                           X
               LENGTH=01,                                              X
               COLOR=NEUTRAL,                                          X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='/'
*
         DFHMDF POS=(19,61),                                           X
               LENGTH=01,                                              X
               COLOR=NEUTRAL,                                          X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='/'
*
         DFHMDF POS=(19,64),                                           X
               LENGTH=01,                                              X
               COLOR=PINK,                                             X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='*'
*
         DFHMDF POS=(19,67),                                           X
               LENGTH=02,                                              X
               COLOR=NEUTRAL,                                          X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='|_'
*
         DFHMDF POS=(19,72),                                           X
               LENGTH=02,                                              X
               COLOR=NEUTRAL,                                          X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='_|'
*
         DFHMDF POS=(20,01),                                           X
               LENGTH=05,                                              X
               COLOR=GREEN,                                            X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='(,v,('
*
         DFHMDF POS=(20,07),                                           X
               LENGTH=29,                                              X
               COLOR=NEUTRAL,                                          X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='."_________________________`.'
*
         DFHMDF POS=(20,37),                                           X
               LENGTH=04,                                              X
               COLOR=GREEN,                                            X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='\vV,'
*
         DFHMDF POS=(20,42),                                           X
               LENGTH=07,                                              X
               COLOR=NEUTRAL,                                          X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='|_____|'
*
         DFHMDF POS=(20,50),                                           X
               LENGTH=02,                                              X
               COLOR=GREEN,                                            X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='V.'
*
         DFHMDF POS=(20,53),                                           X
               LENGTH=08,                                              X
               COLOR=NEUTRAL,                                          X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='//_____/'
*
         DFHMDF POS=(20,62),                                           X
               LENGTH=06,                                              X
               COLOR=GREEN,                                            X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='Vv(,v,'
*
         DFHMDF POS=(20,69),                                           X
               LENGTH=03,                                              X
               COLOR=NEUTRAL,                                          X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='|_|'
*
         DFHMDF POS=(20,73),                                           X
               LENGTH=05,                                              X
               COLOR=GREEN,                                            X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='/,,vh'
*
         DFHMDF POS=(21,07),                                           X
               LENGTH=29,                                              X
               COLOR=NEUTRAL,                                          X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='|___________________________|'
*
         DFHMDF POS=(22,05),                                           X
               LENGTH=33,                                              X
               COLOR=NEUTRAL,                                          X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='."_____________________________`.'
         DFHMSD TYPE=FINAL
         END
@@
//* Adding TITLE
//TITLE EXEC PGM=IEFBR14  
//TITLE EXEC KIKMAPS,MAPNAME=TITLE
//COPY.SYSUT1 DD DATA,DLM=@@
* HLASM BMS Map from TITLE.ans
* Generated using ansi_to_bms.py by Philip Young
* Generated on: 2023-10-09 15:50:18
CICSMAP  TITLE 'Autogenerated BMS'
         PRINT NOGEN
TITLE    DFHMSD TYPE=&SYSPARM,                                         x
               MODE=INOUT,                                             x
               DSATTS=(COLOR,HILIGHT),MAPATTS=(COLOR,HILIGHT),         x
               TIOAPFX=YES,                                            x
               CTRL=FREEKB,STORAGE=AUTO               
* Below is the MAP name, you use this in COBOL to reference the MAP
* You could have more than one map, hence size/line/column
TITLE1   DFHMDI SIZE=(24,80),                                          X
               LINE=1,                                                 X
               COLUMN=1
*
         DFHMDF POS=(01,18),                                           X
               LENGTH=09,                                              X
               COLOR=NEUTRAL,                                          X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='_,-----._'
*
         DFHMDF POS=(02,14),                                           X
               LENGTH=17,                                              X
               COLOR=NEUTRAL,                                          X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='_,-"_,-----._`-._'
*
         DFHMDF POS=(02,47),                                           X
               LENGTH=25,                                              X
               COLOR=BLUE,                                             X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='_________________________'
*
         DFHMDF POS=(03,12),                                           X
               LENGTH=06,                                              X
               COLOR=NEUTRAL,                                          X
               ATTRB=(NORM,PROT),                                      X
               INITIAL=',"_,-"'
*
         DFHMDF POS=(03,20),                                           X
               LENGTH=05,                                              X
               COLOR=NEUTRAL,                                          X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='_____'
*
         DFHMDF POS=(03,27),                                           X
               LENGTH=06,                                              X
               COLOR=NEUTRAL,                                          X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='`-._`.'
*
         DFHMDF POS=(03,45),                                           X
               LENGTH=01,                                              X
               COLOR=BLUE,                                             X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='/'
*
         DFHMDF POS=(03,47),                                           X
               LENGTH=01,                                              X
               COLOR=BLUE,                                             X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='\'
*
         DFHMDF POS=(03,72),                                           X
               LENGTH=02,                                              X
               COLOR=BLUE,                                             X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='\.'
*
         DFHMDF POS=(04,10),                                           X
               LENGTH=04,                                              X
               COLOR=NEUTRAL,                                          X
               ATTRB=(NORM,PROT),                                      X
               INITIAL=',","'
*
         DFHMDF POS=(04,16),                                           X
               LENGTH=13,                                              X
               COLOR=NEUTRAL,                                          X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='_,-"_____`-._'
*
         DFHMDF POS=(04,31),                                           X
               LENGTH=04,                                              X
               COLOR=NEUTRAL,                                          X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='`.`.'
*
         DFHMDF POS=(04,44),                                           X
               LENGTH=01,                                              X
               COLOR=BLUE,                                             X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='|'
*
         DFHMDF POS=(04,48),                                           X
               LENGTH=01,                                              X
               COLOR=BLUE,                                             X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='|'
*
         DFHMDF POS=(04,72),                                           X
               LENGTH=02,                                              X
               COLOR=BLUE,                                             X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='|.'
*
         DFHMDF POS=(05,08),                                           X
               LENGTH=04,                                              X
               COLOR=NEUTRAL,                                          X
               ATTRB=(NORM,PROT),                                      X
               INITIAL=',","'
*
         DFHMDF POS=(05,14),                                           X
               LENGTH=06,                                              X
               COLOR=NEUTRAL,                                          X
               ATTRB=(NORM,PROT),                                      X
               INITIAL=',"_,-"'
*
         DFHMDF POS=(05,25),                                           X
               LENGTH=06,                                              X
               COLOR=NEUTRAL,                                          X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='`-._`.'
*
         DFHMDF POS=(05,33),                                           X
               LENGTH=04,                                              X
               COLOR=NEUTRAL,                                          X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='`.`.'
*
         DFHMDF POS=(05,45),                                           X
               LENGTH=02,                                              X
               COLOR=BLUE,                                             X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='\_'
*
         DFHMDF POS=(05,48),                                           X
               LENGTH=01,                                              X
               COLOR=BLUE,                                             X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='|'
*
         DFHMDF POS=(05,52),                                           X
               LENGTH=07,                                              X
               COLOR=NEUTRAL,                                          X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='Welcome'
*
         DFHMDF POS=(05,60),                                           X
               LENGTH=02,                                              X
               COLOR=NEUTRAL,                                          X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='to'
*
         DFHMDF POS=(05,72),                                           X
               LENGTH=02,                                              X
               COLOR=BLUE,                                             X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='|.'
*
         DFHMDF POS=(06,07),                                           X
               LENGTH=03,                                              X
               COLOR=NEUTRAL,                                          X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='/,"'
*
         DFHMDF POS=(06,12),                                           X
               LENGTH=04,                                              X
               COLOR=NEUTRAL,                                          X
               ATTRB=(NORM,PROT),                                      X
               INITIAL=',","'
*
         DFHMDF POS=(06,29),                                           X
               LENGTH=04,                                              X
               COLOR=NEUTRAL,                                          X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='`.`.'
*
         DFHMDF POS=(06,35),                                           X
               LENGTH=03,                                              X
               COLOR=NEUTRAL,                                          X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='`.\'
*
         DFHMDF POS=(06,48),                                           X
               LENGTH=01,                                              X
               COLOR=BLUE,                                             X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='|'
*
         DFHMDF POS=(06,72),                                           X
               LENGTH=02,                                              X
               COLOR=BLUE,                                             X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='|.'
*
         DFHMDF POS=(07,06),                                           X
               LENGTH=02,                                              X
               COLOR=NEUTRAL,                                          X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='//'
*
         DFHMDF POS=(07,10),                                           X
               LENGTH=04,                                              X
               COLOR=NEUTRAL,                                          X
               ATTRB=(NORM,PROT),                                      X
               INITIAL=',","'
*
         DFHMDF POS=(07,31),                                           X
               LENGTH=04,                                              X
               COLOR=NEUTRAL,                                          X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='`.`.'
*
         DFHMDF POS=(07,37),                                           X
               LENGTH=02,                                              X
               COLOR=NEUTRAL,                                          X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='\\'
*
         DFHMDF POS=(07,48),                                           X
               LENGTH=01,                                              X
               COLOR=BLUE,                                             X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='|'
*
         DFHMDF POS=(07,55),                                           X
               LENGTH=04,                                              X
               COLOR=RED,                                              X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='CICS'
*
         DFHMDF POS=(07,72),                                           X
               LENGTH=02,                                              X
               COLOR=BLUE,                                             X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='|.'
*
         DFHMDF POS=(08,05),                                           X
               LENGTH=02,                                              X
               COLOR=NEUTRAL,                                          X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='//'
*
         DFHMDF POS=(08,09),                                           X
               LENGTH=03,                                              X
               COLOR=NEUTRAL,                                          X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='/,"'
*
         DFHMDF POS=(08,33),                                           X
               LENGTH=03,                                              X
               COLOR=NEUTRAL,                                          X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='`.\'
*
         DFHMDF POS=(08,38),                                           X
               LENGTH=02,                                              X
               COLOR=NEUTRAL,                                          X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='\\'
*
         DFHMDF POS=(08,48),                                           X
               LENGTH=01,                                              X
               COLOR=BLUE,                                             X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='|'
*
         DFHMDF POS=(08,57),                                           X
               LENGTH=07,                                              X
               COLOR=RED,                                              X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='DUNGEON'
*
         DFHMDF POS=(08,72),                                           X
               LENGTH=02,                                              X
               COLOR=BLUE,                                             X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='|.'
*
         DFHMDF POS=(09,04),                                           X
               LENGTH=02,                                              X
               COLOR=NEUTRAL,                                          X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='//'
*
         DFHMDF POS=(09,08),                                           X
               LENGTH=02,                                              X
               COLOR=NEUTRAL,                                          X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='//'
*
         DFHMDF POS=(09,35),                                           X
               LENGTH=02,                                              X
               COLOR=NEUTRAL,                                          X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='\\'
*
         DFHMDF POS=(09,39),                                           X
               LENGTH=02,                                              X
               COLOR=NEUTRAL,                                          X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='\\'
*
         DFHMDF POS=(09,48),                                           X
               LENGTH=01,                                              X
               COLOR=BLUE,                                             X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='|'
*
         DFHMDF POS=(09,72),                                           X
               LENGTH=02,                                              X
               COLOR=BLUE,                                             X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='|.'
*
         DFHMDF POS=(10,02),                                           X
               LENGTH=08,                                              X
               COLOR=NEUTRAL,                                          X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='_;;__;;_'
*
         DFHMDF POS=(10,35),                                           X
               LENGTH=08,                                              X
               COLOR=NEUTRAL,                                          X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='_::__::_'
*
         DFHMDF POS=(10,48),                                           X
               LENGTH=01,                                              X
               COLOR=BLUE,                                             X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='|'
*
         DFHMDF POS=(10,52),                                           X
               LENGTH=05,                                              X
               COLOR=NEUTRAL,                                          X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='Enter'
*
         DFHMDF POS=(10,58),                                           X
               LENGTH=04,                                              X
               COLOR=NEUTRAL,                                          X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='your'
*
         DFHMDF POS=(10,63),                                           X
               LENGTH=04,                                              X
               COLOR=NEUTRAL,                                          X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='name'
*
         DFHMDF POS=(10,72),                                           X
               LENGTH=02,                                              X
               COLOR=BLUE,                                             X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='|.'
*
         DFHMDF POS=(11,01),                                           X
               LENGTH=10,                                              X
               COLOR=NEUTRAL,                                          X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='(o.____.o)'
*
         DFHMDF POS=(11,17),                                           X
               LENGTH=01,                                              X
               COLOR=RED,                                              X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='*'
*
         DFHMDF POS=(11,19),                                           X
               LENGTH=01,                                              X
               COLOR=RED,                                              X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='*'
*
         DFHMDF POS=(11,34),                                           X
               LENGTH=10,                                              X
               COLOR=NEUTRAL,                                          X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='(o.____.o)'
*
         DFHMDF POS=(11,48),                                           X
               LENGTH=01,                                              X
               COLOR=BLUE,                                             X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='|'
*
         DFHMDF POS=(11,52),                                           X
               LENGTH=05,                                              X
               COLOR=NEUTRAL,                                          X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='below'
*
         DFHMDF POS=(11,58),                                           X
               LENGTH=02,                                              X
               COLOR=NEUTRAL,                                          X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='if'
*
         DFHMDF POS=(11,61),                                           X
               LENGTH=03,                                              X
               COLOR=NEUTRAL,                                          X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='you'
*
         DFHMDF POS=(11,65),                                           X
               LENGTH=05,                                              X
               COLOR=NEUTRAL,                                          X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='dare,'
*
         DFHMDF POS=(11,72),                                           X
               LENGTH=02,                                              X
               COLOR=BLUE,                                             X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='|.'
*
         DFHMDF POS=(12,03),                                           X
               LENGTH=01,                                              X
               COLOR=NEUTRAL,                                          X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='|'
*
         DFHMDF POS=(12,08),                                           X
               LENGTH=01,                                              X
               COLOR=NEUTRAL,                                          X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='|'
*
         DFHMDF POS=(12,36),                                           X
               LENGTH=01,                                              X
               COLOR=NEUTRAL,                                          X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='|'
*
         DFHMDF POS=(12,41),                                           X
               LENGTH=01,                                              X
               COLOR=NEUTRAL,                                          X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='|'
*
         DFHMDF POS=(12,48),                                           X
               LENGTH=01,                                              X
               COLOR=BLUE,                                             X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='|'
*
         DFHMDF POS=(12,52),                                           X
               LENGTH=04,                                              X
               COLOR=NEUTRAL,                                          X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='then'
*
         DFHMDF POS=(12,57),                                           X
               LENGTH=03,                                              X
               COLOR=NEUTRAL,                                          X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='hit'
*
         DFHMDF POS=(12,61),                                           X
               LENGTH=06,                                              X
               COLOR=NEUTRAL,                                          X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='enter.'
*
         DFHMDF POS=(12,72),                                           X
               LENGTH=02,                                              X
               COLOR=BLUE,                                             X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='|.'
*
         DFHMDF POS=(13,03),                                           X
               LENGTH=06,                                              X
               COLOR=NEUTRAL,                                          X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='|____|'
*
         DFHMDF POS=(13,36),                                           X
               LENGTH=06,                                              X
               COLOR=NEUTRAL,                                          X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='|____|'
*
         DFHMDF POS=(13,48),                                           X
               LENGTH=01,                                              X
               COLOR=BLUE,                                             X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='|'
*
         DFHMDF POS=(13,72),                                           X
               LENGTH=02,                                              X
               COLOR=BLUE,                                             X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='|.'
*
         DFHMDF POS=(14,03),                                           X
               LENGTH=01,                                              X
               COLOR=NEUTRAL,                                          X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='|'
*
         DFHMDF POS=(14,08),                                           X
               LENGTH=01,                                              X
               COLOR=NEUTRAL,                                          X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='|'
*
         DFHMDF POS=(14,36),                                           X
               LENGTH=01,                                              X
               COLOR=NEUTRAL,                                          X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='|'
*
         DFHMDF POS=(14,41),                                           X
               LENGTH=01,                                              X
               COLOR=NEUTRAL,                                          X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='|'
*
         DFHMDF POS=(14,48),                                           X
               LENGTH=01,                                              X
               COLOR=BLUE,                                             X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='|'
*
NAME     DFHMDF POS=(14,52),                                           X
               LENGTH=17,                                              X
               COLOR=GREEN,                                            X
               HILIGHT=UNDERLINE,                                      X
               ATTRB=(NORM,UNPROT,FSET,IC)
         DFHMDF POS=(14,69),LENGTH=1,ATTRB=ASKIP
*
         DFHMDF POS=(14,72),                                           X
               LENGTH=02,                                              X
               COLOR=BLUE,                                             X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='|.'
*
         DFHMDF POS=(15,03),                                           X
               LENGTH=06,                                              X
               COLOR=NEUTRAL,                                          X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='|____|'
*
         DFHMDF POS=(15,23),                                           X
               LENGTH=01,                                              X
               COLOR=RED,                                              X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='.'
*
         DFHMDF POS=(15,25),                                           X
               LENGTH=01,                                              X
               COLOR=RED,                                              X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='.'
*
         DFHMDF POS=(15,36),                                           X
               LENGTH=06,                                              X
               COLOR=NEUTRAL,                                          X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='|____|'
*
         DFHMDF POS=(15,48),                                           X
               LENGTH=01,                                              X
               COLOR=BLUE,                                             X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='|'
*
         DFHMDF POS=(15,72),                                           X
               LENGTH=02,                                              X
               COLOR=BLUE,                                             X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='|.'
*
         DFHMDF POS=(16,03),                                           X
               LENGTH=01,                                              X
               COLOR=NEUTRAL,                                          X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='|'
*
         DFHMDF POS=(16,08),                                           X
               LENGTH=01,                                              X
               COLOR=NEUTRAL,                                          X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='|'
*
         DFHMDF POS=(16,36),                                           X
               LENGTH=01,                                              X
               COLOR=NEUTRAL,                                          X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='|'
*
         DFHMDF POS=(16,41),                                           X
               LENGTH=01,                                              X
               COLOR=NEUTRAL,                                          X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='|'
*
         DFHMDF POS=(16,48),                                           X
               LENGTH=01,                                              X
               COLOR=BLUE,                                             X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='|'
*
         DFHMDF POS=(16,72),                                           X
               LENGTH=02,                                              X
               COLOR=BLUE,                                             X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='|.'
*
         DFHMDF POS=(17,03),                                           X
               LENGTH=06,                                              X
               COLOR=NEUTRAL,                                          X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='|____|'
*
         DFHMDF POS=(17,12),                                           X
               LENGTH=01,                                              X
               COLOR=RED,                                              X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='.'
*
         DFHMDF POS=(17,14),                                           X
               LENGTH=01,                                              X
               COLOR=RED,                                              X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='.'
*
         DFHMDF POS=(17,36),                                           X
               LENGTH=06,                                              X
               COLOR=NEUTRAL,                                          X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='|____|'
*
         DFHMDF POS=(17,48),                                           X
               LENGTH=01,                                              X
               COLOR=BLUE,                                             X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='|'
*
         DFHMDF POS=(17,52),                                           X
               LENGTH=24,                                              X
               COLOR=BLUE,                                             X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='____________________|___'
*
         DFHMDF POS=(18,03),                                           X
               LENGTH=01,                                              X
               COLOR=NEUTRAL,                                          X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='|'
*
         DFHMDF POS=(18,08),                                           X
               LENGTH=01,                                              X
               COLOR=NEUTRAL,                                          X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='|'
*
         DFHMDF POS=(18,36),                                           X
               LENGTH=01,                                              X
               COLOR=NEUTRAL,                                          X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='|'
*
         DFHMDF POS=(18,41),                                           X
               LENGTH=01,                                              X
               COLOR=NEUTRAL,                                          X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='|'
*
         DFHMDF POS=(18,48),                                           X
               LENGTH=01,                                              X
               COLOR=BLUE,                                             X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='|'
*
         DFHMDF POS=(18,51),                                           X
               LENGTH=01,                                              X
               COLOR=BLUE,                                             X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='/'
*
         DFHMDF POS=(18,75),                                           X
               LENGTH=02,                                              X
               COLOR=BLUE,                                             X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='/.'
*
         DFHMDF POS=(19,03),                                           X
               LENGTH=06,                                              X
               COLOR=NEUTRAL,                                          X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='|____|'
*
         DFHMDF POS=(19,36),                                           X
               LENGTH=06,                                              X
               COLOR=NEUTRAL,                                          X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='|____|'
*
         DFHMDF POS=(19,48),                                           X
               LENGTH=28,                                              X
               COLOR=BLUE,                                             X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='\_/_______________________/.'
*
         DFHMDF POS=(20,03),                                           X
               LENGTH=01,                                              X
               COLOR=NEUTRAL,                                          X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='|'
*
         DFHMDF POS=(20,08),                                           X
               LENGTH=01,                                              X
               COLOR=NEUTRAL,                                          X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='|'
*
         DFHMDF POS=(20,30),                                           X
               LENGTH=01,                                              X
               COLOR=RED,                                              X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='.'
*
         DFHMDF POS=(20,32),                                           X
               LENGTH=01,                                              X
               COLOR=RED,                                              X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='.'
*
         DFHMDF POS=(20,36),                                           X
               LENGTH=01,                                              X
               COLOR=NEUTRAL,                                          X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='|'
*
         DFHMDF POS=(20,41),                                           X
               LENGTH=01,                                              X
               COLOR=NEUTRAL,                                          X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='|'
*
         DFHMDF POS=(21,03),                                           X
               LENGTH=06,                                              X
               COLOR=NEUTRAL,                                          X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='|____|'
*
         DFHMDF POS=(21,36),                                           X
               LENGTH=06,                                              X
               COLOR=NEUTRAL,                                          X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='|____|'
*
ERROR    DFHMDF POS=(21,48),                                           X
               LENGTH=30,                                              X
               COLOR=RED,                                              X
               ATTRB=(NORM,PROT)
*
         DFHMDF POS=(22,03),                                           X
               LENGTH=01,                                              X
               COLOR=NEUTRAL,                                          X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='|'
*
         DFHMDF POS=(22,08),                                           X
               LENGTH=01,                                              X
               COLOR=NEUTRAL,                                          X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='|'
*
         DFHMDF POS=(22,36),                                           X
               LENGTH=01,                                              X
               COLOR=NEUTRAL,                                          X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='|'
*
         DFHMDF POS=(22,41),                                           X
               LENGTH=01,                                              X
               COLOR=NEUTRAL,                                          X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='|'
*
         DFHMDF POS=(23,02),                                           X
               LENGTH=07,                                              X
               COLOR=NEUTRAL,                                          X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='."____|'
*
         DFHMDF POS=(23,36),                                           X
               LENGTH=07,                                              X
               COLOR=NEUTRAL,                                          X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='|____`.'
*
         DFHMDF POS=(23,66),                                           X
               LENGTH=03,                                              X
               COLOR=NEUTRAL,                                          X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='(c)'
*
         DFHMDF POS=(23,70),                                           X
               LENGTH=03,                                              X
               COLOR=NEUTRAL,                                          X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='SoF'
*
         DFHMDF POS=(23,74),                                           X
               LENGTH=04,                                              X
               COLOR=NEUTRAL,                                          X
               ATTRB=(NORM,PROT),                                      X
               INITIAL='2023'
         DFHMSD TYPE=FINAL
         END
@@
//* Compiling DEATHPGM 
//* To show what step we're on
//DEATHPGM EXEC PGM=IEFBR14                                        
//*
//* Compiling DEATHPGM                                         
//DEATHPGM EXEC PROC=KIKGCCCL,
//          LBOUTC='*',
//          GCCPREF='GCC',
//          PDPPREF='PDPCLIB'
//COPY.SYSUT1 DD DATA,DLM=@@
/////////////////////////////////////////////////////////////////
// CICS Dungeon Death Screen
//
// Transaction ID: DEAT
//
// DEATHPGM:
//   Displays the CICS EBCDIC art after deing and displays the
//   the players name, what killed them and the date. After
//   hitting enter it takes the player back to the starting
//   transaction DNGN. 
//
// AUTHOR:
//   Philip Young aka Soldier of FORTRAN
//
// 10/22/2023
// License GPL v3
/////////////////////////////////////////////////////////////////


#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// Required for CICS
#include "dfhaid.h"
#include "death.h"
//#include "kikaid.h"


#define WTO_MESSAGE     "DEAT - %s"
#define NFO_MESSAGE     "DEAT - TRN: %.4s UserID: %.8s TermID: %.4s"
#define SBA_MESSAGE     "DEAT - SBA %d,%d"

char wtomsg[126];               // WTO message buffer

 typedef struct __mycomm__ {
     char name[19];
     char killed_by[19];
 } mycomm;

char *trim(char *string) {
  // Check if the string is null.
  if (string == NULL) {
    return NULL;
  }

  // Initialize the start and end indices of the trimmed string.
  size_t start_index = 0, i;
  size_t end_index = strlen(string);

  // Find the first non-space character.
  while (string[start_index] == ' ') {
    start_index++;
  }

  // Find the last non-space character.
  while (string[end_index] == ' ' || string[end_index] == '\0') {
    end_index--;
  }

  // If the start and end indices are equal, then the string is empty.
  // Return an empty string in this case.
  // if (start_index == end_index) {
  //   return "";
  // }

  // Create a new string to store the trimmed string.
  char *new_string = malloc(end_index - start_index + 2);
  if (new_string == NULL) {
    return NULL;
  }

  // Copy the trimmed string to the new string.
  for ( i = start_index; i <= end_index; i++) {
    new_string[i - start_index] = string[i];
  }

  // Terminate the new string.
  new_string[end_index - start_index + 1] = '\0';

  // Return the new string.

  return new_string;
}

void center_text(char *array, size_t array_length, const char *text) {
  size_t num_spaces, i;
  int array_index;

  if (array == NULL || array_length == 0) {
    return;
  }

  // Check if the text is null.
  if (text == NULL) {
    return;
  }

  // Calculate the number of spaces to add on either side of the text.
  num_spaces = (array_length - strlen(text)) / 2;


  // Initialize the array index.
  array_index = 0;

  // Add the spaces to the beginning of the array.
  for ( i = 0; i < num_spaces; ++i) {
    array[array_index++] = ' ';
  }

  // Add the text to the array.
  for ( i = 0; i < strlen(text); ++i) {
    array[array_index++] = text[i];
  }

  // Add the spaces to the end of the array.
  for ( i = 0; i < num_spaces; ++i) {
    array[array_index++] = ' ';
  }
}

void write_op() {
    int wtolen = sizeof(wtomsg);
#ifdef DEBUG
    EXEC CICS WRITE OPERATOR
     TEXT(wtomsg) TEXTLENGTH(wtolen);
#endif
    memset(wtomsg,'\0',126); 
}


int main(KIKEIB *eib, mycomm *KIKCOMM) {
  char  ws_abstime[8], date[9];
  int dead = 1;

  char *trim_string;
  
  sprintf(wtomsg,"=======DEATH====================================");
  write_op();

  sprintf(wtomsg,"DEAT - EIBAID - 0x%.02x", eib->eibaid);
  write_op();

  if (eib->eibaid == DFHPF5 || eib->eibaid == DFHCLEAR)  {
    sprintf (wtomsg, WTO_MESSAGE, "DEAT - F5 or Clear - EXIT");
    write_op();
    EXEC CICS SEND CONTROL ERASE FREEKB;
    EXEC CICS RETURN END-EXEC;
  } 
  
  sprintf(wtomsg,"DEAT - IEBCALEN = %d",eib->eibcalen);
  write_op();

  if (eib->eibcalen == 0)
    {
    sprintf(wtomsg,"DEAT - No data returning to title");
    write_op();
    EXEC CICS 
      XCTL PROGRAM("TITLEPGM");
    }


  if (eib->eibcalen == 4)
    {
    sprintf(wtomsg,"DEAT - No data returning to title");
    write_op();
    EXEC CICS 
      XCTL PROGRAM("TITLEPGM");
    }

  memset(death1.death1o.namedo,0,sizeof(death1.death1o.namedo));
  memset(death1.death1o.killedo,0,sizeof(death1.death1o.killedo));

  sprintf(wtomsg,"Trimming '%s'",KIKCOMM->name);
  write_op();
  trim_string = trim(KIKCOMM->name);

  sprintf(wtomsg,"Trimmed '%s'",trim_string);
  write_op();

  center_text(death1.death1o.namedo, 
              sizeof(death1.death1o.namedo), 
              trim_string);


  trim_string = trim(KIKCOMM->killed_by);
  sprintf(wtomsg,"Centering '%s'",KIKCOMM->name);
  write_op();

  center_text(death1.death1o.killedo, 
              sizeof(death1.death1o.killedo), 
              trim_string);

  sprintf(wtomsg,"DEAT - Name: '%s'",
  death1.death1o.namedo);
  write_op();
  sprintf(wtomsg,"DEAT - Killed by: '%s'",
  death1.death1o.killedo);
  write_op();


  sprintf(wtomsg,"DEAT - Getting ABSTIME");
  write_op();

  EXEC CICS 
    ASKTIME ABSTIME(ws_abstime);

  sprintf(wtomsg,"DEAT - Getting date");
  write_op();

  EXEC CICS FORMATTIME ABSTIME(ws_abstime)
             MMDDYY(date) DATESEP("/") ;

  sprintf(wtomsg,"DEAT - date %s",date);
  write_op();

  memcpy(death1.death1o.dateo,date,9);
    
  EXEC CICS 
    SEND MAP("death1") 
    MAPSET("death") 
    FROM(death1.death1o)
    ERASE;
        
  sprintf (wtomsg, WTO_MESSAGE, " DEAT - END - CICS Return");
  write_op();
  
  sprintf (wtomsg, "=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-");
  write_op();
  EXEC CICS
      RETURN 
        TRANSID("DEAT")
        COMMAREA(dead) LENGTH(4);

  return 0;
}

@@
//LKED.SYSIN DD *
 INCLUDE SKIKLOAD(KIKCOBGL)
 ENTRY @@KSTRT
 NAME  DEATHPGM(R)
/*
//* Compiling TITLEPGM 
//* To show what step we're on
//TITLEPGM EXEC PGM=IEFBR14                                        
//*
//* Compiling TITLEPGM                                         
//TITLEPGM EXEC PROC=KIKGCCCL,
//          LBOUTC='*',
//          GCCPREF='GCC',
//          PDPPREF='PDPCLIB'
//COPY.SYSUT1 DD DATA,DLM=@@
/////////////////////////////////////////////////////////////////
// CICS Dungeon Title Screen
//
// Transaction ID: DNGN
//
// TESTMAP:
//   Displays the CICS EBCDIC art for the title screen and 
//   requires the player to input a name. Then launches the
//   RGUE transaction. 
//
// AUTHOR:
//   Philip Young aka Soldier of FORTRAN
//
// 10/08/2022
// License GPL v3
/////////////////////////////////////////////////////////////////


#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// Required for CICS
#include "dfhaid.h"
#include "title.h"

#define WTO_MESSAGE     "DNGN - %s"
#define NFO_MESSAGE     "DNGN - TRN: %.4s UserID: %.8s TermID: %.4s"

char wtomsg[126];               // WTO message buffer

void write_op() {
    int wtolen = sizeof(wtomsg);
#ifdef DEBUG
    EXEC CICS WRITE OPERATOR
     TEXT(wtomsg) TEXTLENGTH(wtolen);
#endif
    memset(wtomsg,'\0',126); 
}

int main(DFHEIB *eib) {
  int comm = 1;
  
  sprintf(wtomsg,"=====TITLE=====================================");
  write_op();

  if (eib->eibaid == DFHPF3 || eib->eibaid == DFHCLEAR)
  {
    sprintf (wtomsg, WTO_MESSAGE, "DNGN - F3 or Clear - EXIT");
    write_op();
    EXEC CICS SEND CONTROL ERASE FREEKB;
    EXEC CICS RETURN END-EXEC;
  }
  
  sprintf(wtomsg,"DNGN - IEBCALEN = %d",eib->eibcalen);
  write_op();

  if (eib->eibcalen == 0) {

    sprintf (wtomsg, WTO_MESSAGE, "Welcome to CICS Dungeon");
    write_op();

    sprintf (wtomsg, NFO_MESSAGE, eib->eibtrnid, \
              eib->eibusrid, eib->eibtrmid);
    write_op();

    sprintf (wtomsg, WTO_MESSAGE, "Sending Map TITLE/TITLE1");
    write_op();
    EXEC CICS 
      SEND MAP("title1") 
      MAPSET("title") 
      ERASE;

  } else if (eib->eibcalen > 0 && eib->eibaid == DFHENTER) {

    sprintf(wtomsg,"DNGN - User hit enter, getting player name");
    write_op();

    EXEC CICS
      RECEIVE MAP("title1") MAPSET("title")
              INTO(title1.title1i)
                  ASIS ;
    
      sprintf(wtomsg,"DNGN - Player Name: (%d) %s",
              strlen(title1.title1i.namei),title1.title1i.namei);
      write_op();
    
    if (strlen(title1.title1i.namei) == 0) {    
      
      memset(title1.title1o.erroro,0,30);
      memcpy(title1.title1o.erroro,
            "You must enter a name!!      ",29);
            
      sprintf(wtomsg,"DNGN - Player didn't enter a name");
      write_op();

      EXEC CICS 
        SEND MAP("title1") 
        MAPSET("title") 
        FROM(title1.title1o)
        ERASE;

    } else {
      // Player hit enter and put in a name
      sprintf(wtomsg,"DNGN - Player Name: (%d) %s",
              strlen(title1.title1i.namei),title1.title1i.namei);
      write_op();

      // for(comm = 0;comm <= strlen(title1.title1i.namei); ++comm) {

      // sprintf(wtomsg,"DNGN - Player char: %d (%d) - 0x%.02x",
      //         strlen(title1.title1i.namei),comm,title1.title1i.namei[comm]);
      // write_op();
      // }
      
      sprintf(wtomsg,"DNGN - Leaving TITLE loading DUNGEON");
      write_op();
      EXEC CICS 
          XCTL PROGRAM("DUNGEON")
          COMMAREA(title1.title1i.namei)
          LENGTH(strlen(title1.title1i.namei));
    }
  }
  
        
  sprintf (wtomsg, WTO_MESSAGE, " END - CICS Return");
  write_op();
  
  sprintf (wtomsg, "=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-");
  write_op();
  EXEC CICS
      RETURN 
        TRANSID("DNGN")
        COMMAREA(comm);

  return 0;
}


@@
//LKED.SYSIN DD *
 INCLUDE SKIKLOAD(KIKCOBGL)
 ENTRY @@KSTRT
 NAME  TITLEPGM(R)
/*
//KIKPCT2$ EXEC PGM=IFOX00,
//            PARM='DECK,NOLIST'
//SYSLIB   DD DSN=SYS1.MACLIB,DISP=SHR
//         DD DSN=KICKS.KICKSSYS.V1R5M0.MACLIB,DISP=SHR
//SYSUT1   DD UNIT=SYSDA,SPACE=(CYL,(2,1))
//SYSUT2   DD UNIT=SYSDA,SPACE=(CYL,(2,1))
//SYSUT3   DD UNIT=SYSDA,SPACE=(CYL,(2,1))
//SYSPRINT DD SYSOUT=*
//SYSLIN   DD DUMMY
//SYSPUNCH DD DSN=&&OBJSET,
//         UNIT=SYSDA,SPACE=(80,(200,200)),
//         DISP=(,PASS)
//SYSIN    DD DATA,DLM=@@
         PRINT GEN
         KIKPCT TYPE=INITIAL,SUFFIX=1$
*
*        KICKS SUPPLIED TRANACTIONS
*
*GOOD MORNING MESSAGE (PRESS CLEAR TO ESCAPE)
*     SET REFRESH TIME (IN SECONDS) WITH TWASIZE
*     MIN  3 SECS, MAX 60 SECONDS, OTHERWISE NO REFRESH
*          6 SEEMS TO WORK WELL IN TERMS OF SYNC
*            WITH FLASHING 'FOR TSO' -- W/QWSPLUS
*
KSGM     KIKPCT TYPE=ENTRY,TRANSID=KSGM,PROGRAM=DUNGEON
KSG2     KIKPCT TYPE=ENTRY,TRANSID=KSG2,PROGRAM=KSGMPGM,TWASIZE=6
* FOLLOWING IS VERSION WITH A FIXED SET OF COLORS FOR TESTING...
KSG1     KIKPCT TYPE=ENTRY,TRANSID=KSG1,PROGRAM=KSGMPGM,TWASIZE=1
*
*SIGN OFF (SHUTDOWN KICKS)
*
KSSF     KIKPCT TYPE=ENTRY,TRANSID=KSSF,PROGRAM=KSSFPGM
CSSF     KIKPCT TYPE=ENTRY,TRANSID=CSSF,PROGRAM=KSSFPGM
LOGO     KIKPCT TYPE=ENTRY,TRANSID=LOGO,PROGRAM=KSSFPGM
K999     KIKPCT TYPE=ENTRY,TRANSID=K999,PROGRAM=K999PGM
*
*CRLP TERMINAL CONTROL TRANSACTION
*
CRLP     KIKPCT TYPE=ENTRY,TRANSID=CRLP,PROGRAM=CRLPPGM
*
*COMMAND LEVEL DEBUGGER
*
KEDF     KIKPCT TYPE=ENTRY,TRANSID=KEDF,PROGRAM=KEDFPGM
CEDF     KIKPCT TYPE=ENTRY,TRANSID=CEDF,PROGRAM=KEDFPGM
*
*QUEUE BROWSER
*
KEBR     KIKPCT TYPE=ENTRY,TRANSID=KEBR,PROGRAM=KEBRPGM
CEBR     KIKPCT TYPE=ENTRY,TRANSID=CEBR,PROGRAM=KEBRPGM
*
*MASTER TERMINAL TRANSACTION
*
KSMT     KIKPCT TYPE=ENTRY,TRANSID=KSMT,PROGRAM=KSMTPGM
KEMT     KIKPCT TYPE=ENTRY,TRANSID=KEMT,PROGRAM=KSMTPGM
CSMT     KIKPCT TYPE=ENTRY,TRANSID=CSMT,PROGRAM=KSMTPGM
CEMT     KIKPCT TYPE=ENTRY,TRANSID=CEMT,PROGRAM=KSMTPGM
*
*
********************************************
*         _______  ___   _______  _______                               
*        |       ||   | |       ||       |                              
*        |       ||   | |       ||  _____|                              
*        |       ||   | |       || |_____                               
*        |      _||   | |      _||_____  |                              
*        |     |_ |   | |     |_  _____| |                              
*        |_______||___| |_______||_______|                              
*         ______   __   __  __    _  _______  _______  _____  __    _ 
*        |      | |  | |  ||  |  | ||       ||       ||     ||  |  | |
*        |  _    ||  | |  ||   |_| ||    ___||    ___||  _  ||   |_| |
*        | | |   ||  |_|  ||       ||   | __ |   |___ | | | ||       |
*        | |_|   ||       ||  _    ||   ||  ||    ___|| |_| ||  _    |
*        |       ||       || | |   ||   |_| ||   |___ |     || | |   |
*        |______| |_______||_|  |__||_______||_______||_____||_|  |__|
*        
DNGN     KIKPCT TYPE=ENTRY,TRANSID=DNGN,PROGRAM=TITLEPGM        
RGUE     KIKPCT TYPE=ENTRY,TRANSID=RGUE,PROGRAM=DUNGEON        
DEAT     KIKPCT TYPE=ENTRY,TRANSID=DEAT,PROGRAM=DEATHPGM

********************************************
         KIKPCT TYPE=FINAL
         END
@@
//LKED     EXEC PGM=IEWL,PARM='XREF,MAP,LET,NCAL',
//         COND=(0,NE,KIKPCT2$)
//SYSLIN   DD DSN=&&OBJSET,DISP=(OLD,DELETE)
//SYSIN    DD DUMMY
//SYSLMOD  DD DSN=KICKS.KICKSSYS.V1R5M0.SKIKLOAD(KIKPCT2$),DISP=SHR
//SYSUT1   DD UNIT=SYSDA,SPACE=(CYL,(2,1))
//SYSPRINT DD SYSOUT=*
//KIKPPT2$ EXEC PGM=IFOX00,
//            PARM='DECK,NOLIST'
//SYSLIB   DD DSN=SYS1.MACLIB,DISP=SHR
//         DD DSN=KICKS.KICKSSYS.V1R5M0.MACLIB,DISP=SHR
//SYSUT1   DD UNIT=SYSDA,SPACE=(CYL,(2,1))
//SYSUT2   DD UNIT=SYSDA,SPACE=(CYL,(2,1))
//SYSUT3   DD UNIT=SYSDA,SPACE=(CYL,(2,1))
//SYSPRINT DD SYSOUT=*
//SYSLIN   DD DUMMY
//SYSPUNCH DD DSN=&&OBJSET,
//         UNIT=SYSDA,SPACE=(80,(200,200)),
//         DISP=(,PASS)
//SYSIN    DD DATA,DLM=@@
         PRINT GEN
         KIKPPT TYPE=INITIAL,SUFFIX=1$
*
* ****** ************************************************************
*
         KIKPPT TYPE=ENTRY,PROGRAM=KSDBLOAD,PGMLANG=CMDLVL
*
*        KICKS SUPPLIED PROGRAMS
*
*        -- LOGON/LOGOFF - AKA STARTUP/SHUTDOWN
*
         KIKPPT TYPE=ENTRY,PROGRAM=KSGMPGM,PGMLANG=CMDLVL
         KIKPPT TYPE=ENTRY,PROGRAM=KSGMAP,USAGE=MAP
         KIKPPT TYPE=ENTRY,PROGRAM=KSGMHLP,PGMLANG=CMDLVL
         KIKPPT TYPE=ENTRY,PROGRAM=KSGMLIC,PGMLANG=CMDLVL
         KIKPPT TYPE=ENTRY,PROGRAM=KSGMAPL,USAGE=MAP
         KIKPPT TYPE=ENTRY,PROGRAM=KSSFPGM,PGMLANG=CMDLVL
         KIKPPT TYPE=ENTRY,PROGRAM=K999PGM,PGMLANG=CMDLVL
*
*        -- DB2 SUPPORT FOR Z/OS
*
         KIKPPT TYPE=ENTRY,PROGRAM=DSNHDECP,PGMLANG=ASSEMBLER,         *
               LOAD=INITIAL
*
*        -- CRLP CONTROL
*
         KIKPPT TYPE=ENTRY,PROGRAM=CRLPPGM,PGMLANG=MACC
*
*        -- SYNCPOINT EXIT
*
         KIKPPT TYPE=ENTRY,PROGRAM=SYNCXIT,PGMLANG=CMDLVL
*
*        -- LOGGER
*
         KIKPPT TYPE=ENTRY,PROGRAM=KLOGIT,PGMLANG=CMDLVL
*
*        -- COMMAND LEVEL DEBUGGER
*
         KIKPPT TYPE=ENTRY,PROGRAM=KEDFPGM,PGMLANG=CMDLVL
         KIKPPT TYPE=ENTRY,PROGRAM=KEDFON,PGMLANG=MACC     KEDF ON
         KIKPPT TYPE=ENTRY,PROGRAM=KEDFOFF,PGMLANG=MACC    KEDF OFF
         KIKPPT TYPE=ENTRY,PROGRAM=KEDFSTA,PGMLANG=MACC    KEDF STATUS
         KIKPPT TYPE=ENTRY,PROGRAM=KEDFILTR,PGMLANG=ASSEMBLER
         KIKPPT TYPE=ENTRY,PROGRAM=KEDMAP,USAGE=MAP
         KIKPPT TYPE=ENTRY,PROGRAM=KEDFXEQ,PGMLANG=MACC
*
*        -- KEBR - QUEUE BROWSER
*
         KIKPPT TYPE=ENTRY,PROGRAM=KEBRPGM,PGMLANG=CMDLVL
         KIKPPT TYPE=ENTRY,PROGRAM=KEBRM,USAGE=MAP
         KIKPPT TYPE=ENTRY,PROGRAM=KEBRHELP,PGMLANG=ASSEMBLER
*
*        -- KSMT - 'MASTER TERMINAL' TRACSACTION
*
         KIKPPT TYPE=ENTRY,PROGRAM=KSMTPGM,PGMLANG=CMDLVL
*
*        -- LINKED-TO C PGMS TO MANIPULATE CSA (CALLED BY KSMT)
*
*        ---- TRACE TABLE CONTROL ROUTINES
*
         KIKPPT TYPE=ENTRY,PROGRAM=KTRCSTA,PGMLANG=MACC    GET TRACE
         KIKPPT TYPE=ENTRY,PROGRAM=KTRCON,PGMLANG=MACC     TRACE ON
         KIKPPT TYPE=ENTRY,PROGRAM=KTRCOFF,PGMLANG=MACC    TRACE OFF
         KIKPPT TYPE=ENTRY,PROGRAM=KTRCAON,PGMLANG=MACC    AUX TR ON
         KIKPPT TYPE=ENTRY,PROGRAM=KTRCAOF,PGMLANG=MACC    AUX TR OFF
         KIKPPT TYPE=ENTRY,PROGRAM=KTRCINON,PGMLANG=MACC   INTENSE ON
         KIKPPT TYPE=ENTRY,PROGRAM=KTRCINOF,PGMLANG=MACC   INTENSE OFF
*
*        ---- ICVR CONTROL ROUTINES
*
         KIKPPT TYPE=ENTRY,PROGRAM=KICVRGET,PGMLANG=MACC   GET ICVR
         KIKPPT TYPE=ENTRY,PROGRAM=KICVRPUT,PGMLANG=MACC   PUT ICVR
*
*        ---- LASTCC/MAXCC ROUTINES
*
         KIKPPT TYPE=ENTRY,PROGRAM=KLASTCCG,PGMLANG=MACC   GET LASTCC
         KIKPPT TYPE=ENTRY,PROGRAM=KLASTCCP,PGMLANG=MACC   PUT LASTCC
         KIKPPT TYPE=ENTRY,PROGRAM=KMAXCCG,PGMLANG=MACC    GET MAXCC
         KIKPPT TYPE=ENTRY,PROGRAM=KMAXCCP,PGMLANG=MACC    PUT MAXCC
*
********************************************
*         _______  ___   _______  _______                               
*        |       ||   | |       ||       |                              
*        |       ||   | |       ||  _____|                              
*        |       ||   | |       || |_____                               
*        |      _||   | |      _||_____  |                              
*        |     |_ |   | |     |_  _____| |                              
*        |_______||___| |_______||_______|                              
*         ______   __   __  __    _  _______  _______  _____  __    _ 
*        |      | |  | |  ||  |  | ||       ||       ||     ||  |  | |
*        |  _    ||  | |  ||   |_| ||    ___||    ___||  _  ||   |_| |
*        | | |   ||  |_|  ||       ||   | __ |   |___ | | | ||       |
*        | |_|   ||       ||  _    ||   ||  ||    ___|| |_| ||  _    |
*        |       ||       || | |   ||   |_| ||   |___ |     || | |   |
*        |______| |_______||_|  |__||_______||_______||_____||_|  |__|
*        
         KIKPPT TYPE=ENTRY,PROGRAM=DUNGEON,PGMLANG=CMDLVL
         KIKPPT TYPE=ENTRY,PROGRAM=TITLEPGM,PGMLANG=CMDLVL
         KIKPPT TYPE=ENTRY,PROGRAM=DEATHPGM,PGMLANG=CMDLVL
         KIKPPT TYPE=ENTRY,PROGRAM=TITLE,USAGE=MAP
         KIKPPT TYPE=ENTRY,PROGRAM=DEATH,USAGE=MAP
         KIKPPT TYPE=FINAL
         END
@@
//LKED     EXEC PGM=IEWL,PARM='XREF,MAP,LET,NCAL',
//         COND=(0,NE,KIKPPT2$)
//SYSLIN   DD DSN=&&OBJSET,DISP=(OLD,DELETE)
//SYSIN    DD DUMMY
//SYSLMOD  DD DSN=KICKS.KICKSSYS.V1R5M0.SKIKLOAD(KIKPPT2$),DISP=SHR
//SYSUT1   DD UNIT=SYSDA,SPACE=(CYL,(2,1))
//SYSPRINT DD SYSOUT=*
//ROGUEH  EXEC PGM=PDSLOAD
//STEPLIB  DD  DSN=SYSC.LINKLIB,DISP=SHR
//SYSPRINT DD  SYSOUT=*
//SYSUT2   DD  DISP=SHR,DSN=KICKS.KICKS.V1R5M0.GCCCOPY
//SYSUT1   DD DATA,DLM=@@
./ ADD NAME=ROGUE
/////////////////////////////////////////////////////////////////
// Header file for CICS Dungeon/Rogue
//
// AUTHOR:
//   Philip Young aka Soldier of FORTRAN
//
// 10/08/2022
// License GPL v3
/////////////////////////////////////////////////////////////////


#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>

// Required for CICS
#include "dfhaid.h"

// Define if we're in KICKS
#define KICKS 1

/* Colors */
#define BLUE            0xf1
#define RED             0xf2
#define PINK            0xf3
#define GREEN           0xf4
#define TURQUOISE       0xf5
#define YELLOW          0xf6
#define NEUTRAL_WHITE   0xf7
#define BLACK           0xf8
// The following are not supported by all emulators
#define DEEP_BLUE	      0xf9
#define ORANGE          0xfa
#define PURPLE          0xfb
#define PALE_GREEN      0xfc
#define PALE_TURQUOISE  0xfd
#define GREY            0xfe
#define WHITE           0xff
/* Constants */
#define MAXROWS         23 // 24-2 for header and footer
#define MAXCOLS         78 // 80-2 for header and footer
#define MAXSCREEN       10240 //we need a big buffer
#define MAXX 45
#define WTO_MESSAGE     "RGUE - %s"
#define NFO_MESSAGE     "RGUE - TRN: %.4s UserID: %.8s TermID: %.4s"
#define SBA_MESSAGE     "RGUE - SBA ROW %d, COL %d"
#define HEADER_STATS    "%s: %d"
#define SEEKING_BEHAVIOR 2
#define RANDOM_BEHAVIOR  1      
// typedef struct PLAYER {
//   char name[18];
// } player;

// struct PLAYER commarea;

typedef struct Position {
  int y; // row
  int x; // col
} Position;

typedef struct Level {
  int level;
  char ** tiles;
  char ** colors;
  int number_of_rooms;
  struct Room ** rooms;
  struct Monster ** monsters;
  int number_of_monsters;
  struct Player * player;
  Position stairs_up;
  Position stairs_down;
  struct Item * weapon;
  struct Item * potion;
  struct Item * armor;
  int leveled_up;
  char message[80];
} Level;

typedef struct Monster {
  char symbol;
  char string[2];
  char *name;
  char color;
  int health;
  int alive;
  int attack;
  int speed;
  int defense;
  int pathfinding;
  int room_number;
  Position * position;
} Monster;

typedef struct Player {
  char name[19];
  Position * position;
  int hp;
  int gold;
  int atk;
  int def;
  int xp;
  int level;
  int max_health;
 } Player;

typedef struct __mycomm__ {
     char name[19];
 } mycomm;


typedef struct dead {
     char name[19];
     char killed_by[19];
 } dead;

typedef struct Room {
  Position pos; // Top Left
  int height;
  int width;
  struct Door ** doors;
  int number_of_doors;
  // Monster * monsters;
  // Item * items;
} Room;

typedef struct Door {
  Position * position;
  int connected;
} Door;

typedef struct Game {
  Level * levels[6];
  int current_level;
  int number_of_levels;
} Game;

typedef enum {WEAPON_TYPE, POTION_TYPE, ARMOR_TYPE} ItemType;

typedef struct Weapon {
    int attack;
} Weapon;

typedef struct Potion {
    int health;
} Potion;

typedef struct Armor {
    int defense;
} Armor;

typedef struct Item {
  ItemType type;
  Position * position;
  union {
    Weapon * weapon;
    Potion * potion;
    Armor * armor;
  } item;
  char name[80];
  char color;
  char symbol;
  int collected;
} Item;

/*
 * From x3270 project
 * code_table is used to translate buffer 
 * addresses and attributes to the 3270
 * datastream representation
 */
 static unsigned char code_table[64] = {
    0x40, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7,
    0xC8, 0xC9, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F,
    0x50, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD7,
    0xD8, 0xD9, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F,
    0x60, 0x61, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7,
    0xE8, 0xE9, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F,
    0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7,
    0xF8, 0xF9, 0x7A, 0x7B, 0x7C, 0x7D, 0x7E, 0x7F,
};

char screen[MAXSCREEN]; // Screen Buffer
int location;               // Index tracker of screen buffer
char wtomsg[126];               // WTO message buffer
// char map[22][78];  // Map buffer
// char colors[22][78]; // Colors buffer


// 3270 Functions 
short encode_sba (int x, int y);
void append_screen(const char *chars, int length);
void sba(int x, int y);
void change_color(char color);
int size_of_screen();
void exit_kicks();

// map.c
Level * create_level(int level);
char ** save_positions();
char ** save_colors();
int draw_level(Level * level);
Room * create_room(int grid, int number_of_doors);
void rooms_setup(Level * level);
int draw_room(Room *room, Level * level);
void connect_doors(Level * level);
void add_stairs(Level * level);

// init.c

void init_screen();
void header(Player * player, int floor);
void footer(Level * level);
void intro(char * name);

// screen.c
void put_tile(int y, int x, char *ch, char color, Level * level);
void draw_tiles(Level * level);
char get_char(int y, int x, char ** tiles) ;
// int walkable(int x,int y, char ** tiles);
void render(Level * level);
void put_items(Level * level);
void put_stairs(Level * level);

// Player
Player * player_setup() ;
int handle_input(int eibaid, Level * level, Game * game);
void put_player(Level * level);
int place_player(Level * level);
void dead_player(Level * level, char * killed_by);
int sync_stats_between_levels(Game * game);
void killed_all_monsters(Level * level);

// rogue.c
void write_op();



// Monsters

int add_monsters(Level * level);
Monster * select_monster(int level);
Monster * create_monster(char symbol, int health, int attack, 
                          int speed, int defense, 
                          int pathfinding, char color, char *name);
int set_starting_position(Monster * monster, Room * room, 
                          Level * level, int room_number);
int move_monsters(Level * level);
int m_seek(Position * start, Position * destination, 
          Level * level, Monster * monster);
void m_random(Position * position, Level * level, Monster * monster);
void put_monster(Monster * monster);
void kill_monster(Monster * monster);

// combat.c
int combat(Level * level, Monster * monster, int order);

// pathfinding.c

int path_find(Position * start, Position * end, Level * level);
int add_position_YX(int ** frontier, int frontier_count, int y, int x);
int add_neighbors_YX(int ** frontier, int *** camefrom,
                     int frontier_count, int y, int x, 
                     Level * level, int monster);
int check_pos(int y, int x, Level * level);

int position_check(int y, int x, Level * level, int monster);

// items.c
./ ADD NAME=ITEMS
const char* weapon_names[] = {
  "Nunchucks of Power",
  "Fakescalibur",
  "Grimm Hammer",
  "Razor Song",
  "Soulless Scimitar",
  "Pointed Stick",
  "Excalibur",
  "Durendal",
  "Grieving Blade",
  "Unholy Cleaver",
  "System 370 Operators Reference Guide",
  "Liar's Boomstick",
  "Assassination Scythe",
  "Sinister Obsidian Reaper",
  "Staff of Sacrifice",
  "Kumorigachi",
  "Thundersoul",
  "Jawbreaker",
  "Axe of Joy",
  "Dawnbreaker",
  "Big Sais",
  "Doomblade"
};

const char* armor_names[] = {
"Undead Blockade",
"Eternal Copper Carapace",
"Savage Iron Defender",
"Soulless Mithril Guardian",
"Judgement Barrier",
"Vindicator Shield",
"Ivory Guard",
"Renewed Iron Gloves",
"Gloves of Demonic Protection",
"Fusion Linen Handwraps",
"Thunder Silk Cloak",
"Reincarnated Shroud of Kings",
"Roaring Cloak of Assassination",
"Proud Mantle of the Talon",
"Wrap of Ancient Glory",
"Warrior Cloak of the Storm",
"Conqueror's Chain Chestpiece",
"Breastplate of the Boar",
"Prime Bronze Tunic",
"Chain Chestguard of Fortune"
};

const char* potion_names[] = {
"Flask of Cure Disease",
"Elixir of Health",
"Vial of Cure Wounds",
"Flask of Holy Water",
"Brew of the Sun",
"Potion of Salvation",
"Elixir of Excitement",
"Tonic of the High Mage",
"Potion of Comfort",
"Draught of Healing",
"Elixir of Peace of Mind"
};

void add_items(Level * level);
Item * create_sword(int y, int x, int attack);
Item * create_potion(int y, int x, int health);
Item * create_armor(int y, int x, int armor);

@@
//* Compiling DUNGEON                                         
//DUNGEON   EXEC PROC=KIKGCCCL,
//          LBOUTC='*',
//          GCCPREF='GCC',
//          PDPPREF='PDPCLIB'
//COPY.SYSUT1 DD DATA,DLM=@@
/////////////////////////////////////////////////////////////////
// CICS Dungeon main program
//
// Transaction ID: RGUE
//
// DUNGEON:
//   This contains the main game logic and screen drawing
//   algorithms. It's broken up in to multiple C files but
//   the scripts build.sh and release.sh simply combine
//   all these files in to one DD inline statement. 
//
// AUTHOR:
//   Philip Young aka Soldier of FORTRAN
//
// 10/08/2022
// License GPL v3
/////////////////////////////////////////////////////////////////

#include "rogue.h"
#include "items.h"

//////////////////////////////////////////////////////////////////////////
// Debug
//////////////////////////////////////////////////////////////////////////

void write_op() {
    int wtolen = sizeof(wtomsg);
#ifdef DEBUG
    EXEC CICS WRITE OPERATOR
     TEXT(wtomsg) TEXTLENGTH(wtolen);
#endif
    memset(wtomsg,'\0',126); 
}

//////////////////////////////////////////////////////////////////////////
// Main
//////////////////////////////////////////////////////////////////////////

int main(KIKEIB *eib, mycomm *KIKCOMM) {


  sprintf(wtomsg,"=======ROGUE================================");
  write_op();
  srand(time(NULL));

  int y,x,counter=0;
  Game * game;
  Level * level;

  game->current_level = 0;
  game->number_of_levels = 6;

  if (eib->eibcalen == 0)
    {
    sprintf(wtomsg,"RGUE - No data returning to title");
    write_op();
    EXEC CICS 
      XCTL PROGRAM("TITLEPGM");
    }

  game->levels[0] = create_level(1);
  game->levels[1] = create_level(2);
  game->levels[2] = create_level(3);
  game->levels[3] = create_level(4);
  game->levels[4] = create_level(5);
  game->levels[5] = create_level(6);
  // game->levels[6] = create_level(7);
  memcpy(game->levels[0]->player->name,KIKCOMM->name,19);
  memcpy(game->levels[1]->player->name,KIKCOMM->name,19);
  memcpy(game->levels[2]->player->name,KIKCOMM->name,19);
  memcpy(game->levels[3]->player->name,KIKCOMM->name,19);
  memcpy(game->levels[4]->player->name,KIKCOMM->name,19);
  memcpy(game->levels[5]->player->name,KIKCOMM->name,19);
  // memcpy(game->levels[6]->player->name,KIKCOMM->name,19);
  intro(KIKCOMM->name);
  eib->eibaid = DFHNULL;
  
  // 


  while(1) {   
    int i;
    sprintf(wtomsg,"=======WHILE (%d)================================", 
              game->current_level);
    write_op(); 

    init_screen();  
    sync_stats_between_levels(game);
    handle_input(eib->eibaid, level, game) ;
    level = game->levels[game->current_level];
    render(level);

    sprintf(wtomsg,"RGUE - CICS SEND screen");
    write_op();


    EXEC CICS SEND TEXT
      FROM(screen) LENGTH(size_of_screen()+1)
      STRFIELD;

    sprintf(wtomsg,"RGUE - Get Data");
    write_op();

    EXEC KICKS RECEIVE NOHANDLE ;

  } // end of while loop

  // EXEC CICS
  //     RETURN 
  //       TRANSID("RGUE")
  //       COMMAREA(player) LENGTH(sizeof(player));

  return 0;
}

//////////////////////////////////////////////////////////////////////////
// 3270 Functions
// 3270.c
//////////////////////////////////////////////////////////////////////////


short encode_sba (int y, int x) {
    unsigned short loc;
    // x is columns, y is rows
    // ((Row -1) * 80) + (Col - 1)
    loc = ((y - 1) * 80 ) + (x - 1);

    // sprintf(wtomsg,"loc = %dencode x (COL) %d y (ROW) %d",loc,x, y);
    // write_op();

     return(code_table[((loc) >> 6) & 0x3F] * 0x100 \
     + code_table[(loc) & 0x3F]);
  }
  
void append_screen(const char *chars, int length) {
  int i;    
  // Check if the index is within the bounds of the array.
  if (location < 0 || location >= sizeof(screen)) {

    // sprintf(wtomsg,"CANNOT APPEND TO screen location=%d",location);
    // write_op();
    return;
  }

  for(i=0;i<length;i++){
    // sprintf(wtomsg,"appending: 0x%.02x",chars[i]);
    // write_op();
  }

  // Copy the characters to the array.
  memcpy(&screen[location], chars, length);

  // Increment the index by the number of characters inserted.
  location += length;
}

void sba(int y, int x) {
    // Don't forget x is columns, y is rows
    // sprintf(wtomsg, SBA_MESSAGE,y, x);
    // write_op();
    short enc;
    append_screen("\x11",1);
    enc = encode_sba(y, x);
  // Check if the index is within the bounds of the array.
  if (location +2 >= sizeof(screen)) {
    return;
  }
    memcpy(&screen[location], (unsigned char*)&enc, 2);
    location += 2;
}


void change_color(char color) {
  // x'28' - SF
  // x'41' - Extended Highlighting
  // x'00' - Default
  // x'28' - SF
  // x'42' - Color
  append_screen("\x28\x41\x00\x28\x42",5);
  // printf("Changing color to 0x%.02hhx\n",color);
  append_screen(&color,1);
}

int size_of_screen() {
  // Screen contains nulls so we can't use
  // strlen so we use this
  // Find the last non-null character.
  int end_index = MAXSCREEN;
  while (screen[end_index] == '\0') {
    end_index--;
  }

  return(end_index);
}


void exit_kicks() {
  sprintf(wtomsg,"Error Allocating Memory, exiting KICKS");
  write_op();
  EXEC KICKS SIGNOFF END-EXEC;
  EXEC KICKS DELAY INTERVAL(2) END-EXEC;
  EXEC KICKS SEND CONTROL ERASE ALTERNATE FREEKB END-EXEC;
}//////////////////////////////////////////////////////////////////////////
// Putting/getting things on screen(tm) Functions
// screen.c
//////////////////////////////////////////////////////////////////////////

// Fills our map buffer with tiles at locations
void put_tile(int y, int x, char *ch, char color, Level * level) {
  // sprintf(wtomsg,"Placing '%s' Color: '%.02x' (y:%d, x:%d)",
  //                 ch,color,y,x);
  // write_op();  
  // colors[y][x] = color;
  // map[y][x] = ch[0];
  level->tiles[y][x] = ch[0];
  level->colors[y][x] = color;
}

// draws the contents of map and colors
void draw_tiles(Level * level) {
  int y,x;
  char * tile;
  for(y=1;y<=MAXROWS;y++) {
    for(x=1; x<= MAXCOLS;x++) {
      if (level->tiles[y][x] != '\0') {
        // sprintf(wtomsg,"Mapping '%c' Color: '%.02x' (y:%d, x:%d)",
        //                  level->tiles[y][x],level->colors[y][x],y,x);
        // write_op();
        sba(y, x);
        change_color(level->colors[y][x]);
        tile = &level->tiles[y][x];
        append_screen(tile,1);
      }
    }
  }  
}

char get_char(int y, int x, char ** tiles) {
  // sprintf(wtomsg,"get_char: y:%d, x%d = '%c'",y,x,tiles[y][x]);
  // write_op();
  return tiles[y][x];
}

void put_stairs(Level * level) {
  // down stairs >
  if (level->level < 6 )
  {
    sba(level->stairs_down.y,level->stairs_down.x);
    change_color(YELLOW);
    append_screen(">",1);
  }
  
  // up stairs <
  if (level->level > 1 )
  {
    sba(level->stairs_up.y,level->stairs_up.x);
    change_color(YELLOW);
    append_screen("<",1);
  }
}

void put_items(Level * level) {
  char temp[2];
  // weapon
  if(!level->weapon->collected) 
  {
  sba(level->weapon->position->y,level->weapon->position->x);
  change_color(level->weapon->color);
  sprintf(temp,"%c",level->weapon->symbol);
  append_screen(temp,1);
  }
  // armor
  if(!level->armor->collected) 
  {
  sba(level->armor->position->y,level->armor->position->x);
  change_color(level->armor->color);
  sprintf(temp,"%c",level->armor->symbol);
  append_screen(temp,1);
  }
  // potion
  if(!level->potion->collected) 
  {
  sba(level->potion->position->y,level->potion->position->x);
  change_color(level->potion->color);
  sprintf(temp,"%c",level->potion->symbol);
  append_screen(temp,1);
  }
}

void win_screen(char * name) {
  init_screen(); 
  sba(1,1);
  append_screen("Congrats",8);
  sba(1,10);
  change_color(RED);
  append_screen(name,19);
  sba(3,1);
  change_color(BLUE);
  append_screen("You have conquered the dungeon and defeated the final ",54);
  append_screen("boss. You grab ",15);
  sba(4,1);
  append_screen("what you came for, the source code to JES2.",43);
  sba(6,1);
  append_screen("You sheath your sword and turn to leave the ",44);
  append_screen("datacenter. You have much ",26);
  sba(7,1);
  append_screen("to think about your journey, and you know that your",52);
  append_screen("life will never be ",19);
  sba(8,1);
  append_screen("the same again.",15);
  sba(10,1);
  append_screen("But you also know that there will be other challenges ",54);
  append_screen("ahead. The world",16);
  sba(11,1);
  append_screen("is still in ruins, and there are many dangers that ",51);
  append_screen("still lurk in the",17);
  sba(12,1);
  append_screen("shadows. But you are confident that you, and the other ",55);
  append_screen("survivors, can",14);
  sba(13,1);
  append_screen("rebuild the world and create a better future.",45);
  sba(15,1);
  append_screen("You walk out of the discheveled datacenter, ready to ",53);
  append_screen("face the future",15);
  sba(16,1);
  append_screen("with courage and determination.",31);
  sba(18,1);
  change_color(GREEN);
  append_screen("Credits:",8);
  sba(19,1);
  append_screen("Game Design and Graphics: ",26);
  change_color(TURQUOISE);
  append_screen("Soldier of FORTRAN",18);

  EXEC CICS SEND TEXT
    FROM(screen) LENGTH(size_of_screen()+1)
    STRFIELD;

  EXEC KICKS RECEIVE NOHANDLE ;

  EXEC CICS 
      XCTL PROGRAM("TITLEPGM");
  return;
}

void render(Level * level) {
    killed_all_monsters(level); 
    draw_tiles(level); 
    put_stairs(level);
    put_items(level);
    put_player(level);
    move_monsters(level);
    header(level->player, level->level);
    footer(level);
}



//////////////////////////////////////////////////////////////////////////
// Map Functions
// map.c
//////////////////////////////////////////////////////////////////////////

Level * create_level(int level) {
  Level * new_level;
  new_level = malloc(sizeof(Level));
  new_level->level = level;
  new_level->number_of_rooms = 6;
  new_level->leveled_up = 0;
  rooms_setup(new_level);
  connect_doors(new_level);
  add_monsters(new_level);
  add_stairs(new_level);
  add_items(new_level);
  new_level->player = player_setup();
  place_player(new_level);

  memset(new_level->message,0,80);
  return new_level;

}

// char ** save_positions() {
//   int x;
//   int y;
//   char ** positions;
//   positions = malloc(sizeof(char *) * MAXROWS);

//   for (y=0; y <= MAXROWS; y++)
//   {
//     positions[y] = malloc(sizeof(char)*MAXCOLS);
//     memset(positions[y],0,MAXCOLS);
    
//   }
  
//   return positions;
// }

// char ** save_colors() {
//   int x;
//   int y;
//   char ** tile_colors;
//   tile_colors = malloc(sizeof(char *) * MAXROWS);

//   for (y=1; y <= MAXROWS; y++)
//   {
//     tile_colors[y] = malloc(sizeof(char)*MAXCOLS);
//     for (x=1; x <= MAXCOLS; x ++)
//     {
//       // sprintf(wtomsg,"save_colors: y:%d x:%d",y,x);
//       // write_op();
//       //tile_colors[y][x] = colors[y][x];
//     }
    
//   }
  
//   return tile_colors;
// }

Room * create_room(int grid, int number_of_doors) {
  sprintf(wtomsg,"Adding room in grid %d", grid);
  write_op();
  // sprintf(wtomsg,"Adding room y:%d x:%d w:%d h:%d", y, x, width, height);
  // write_op();

  Room * new_room;
  int i, x;
  
  new_room = malloc(sizeof(Room));
  new_room->number_of_doors = number_of_doors;
  
  // new_room->pos.y = y;
  // new_room->pos.x = x;
  // new_room->width = width;
  // new_room->height = height;

  switch (grid)
  {
  case 0:
    new_room->pos.x = 1;
    new_room->pos.y = 3;
    break;
  case 1:
    new_room->pos.x = 26;
    new_room->pos.y = 3;
    break;
  case 2:
    new_room->pos.x = 52;
    new_room->pos.y = 3;
    break;
  case 3:
    new_room->pos.x = 1;
    new_room->pos.y = 14;
    break;
  case 4:
    new_room->pos.x = 26;
    new_room->pos.y = 14;
    break;
  case 5:
    new_room->pos.x = 52;
    new_room->pos.y = 14;
    break;
  
  default:
    break;
  }
  
  new_room->height = (rand() % 4) + 4; // Max room height total 8
  new_room->width =  (rand() % 13) + 7; // Max room width total 19

  // Offset
  x = 24 - new_room->width;
  // sprintf(wtomsg,"x create room %d",x);
  // write_op();
  new_room->pos.x += rand() % (x);

  x = 9 - new_room->height;
  // sprintf(wtomsg,"y create room %d",x);
  // write_op();
  new_room->pos.y += rand() % (x);

  new_room->doors = malloc(sizeof(Door *)*number_of_doors);

  // for (i = 0; i < number_of_doors; i++)
  // {
  //   new_room->doors[i] = malloc(sizeof(Door));
  //   new_room->doors[i]->connected = 0;
  // }
  

  switch (grid)
  {
  case 0:
    new_room->doors[0] = malloc(sizeof(Door));
    new_room->doors[1] = malloc(sizeof(Door));
    new_room->doors[0]->position = malloc(sizeof(Position));
    new_room->doors[1]->position = malloc(sizeof(Position));

    
    // right door
    new_room->doors[0]->position->x = new_room->pos.x + new_room->width -1;
    new_room->doors[0]->position->y = rand() % (new_room->height - 2) + \
            new_room->pos.y+1;
    
    // bottom door
    new_room->doors[1]->position->x = rand() % (new_room->width - 2) + \
            new_room->pos.x +1;
    new_room->doors[1]->position->y = new_room->pos.y + new_room->height;
    break;
  case 1:
    new_room->doors[0] = malloc(sizeof(Door));
    new_room->doors[1] = malloc(sizeof(Door));
    new_room->doors[0]->position = malloc(sizeof(Position));
    new_room->doors[1]->position = malloc(sizeof(Position));
    
    // left door
    new_room->doors[0]->position->x = new_room->pos.x;
    new_room->doors[0]->position->y = rand() % (new_room->height - 2 )+ \
            new_room->pos.y+1;
    // right door
    new_room->doors[1]->position->x = new_room->pos.x + new_room->width -1;
    new_room->doors[1]->position->y = rand() % (new_room->height - 2) + \
            new_room->pos.y+1;
    break;
  case 2:
    new_room->doors[0] = malloc(sizeof(Door));
    new_room->doors[1] = malloc(sizeof(Door));
    new_room->doors[0]->position = malloc(sizeof(Position));
    new_room->doors[1]->position = malloc(sizeof(Position));
    new_room->doors[1]->connected = 0;
    new_room->doors[0]->connected = 0;
    
    // left door
    new_room->doors[0]->position->x = new_room->pos.x;
    new_room->doors[0]->position->y = rand() % (new_room->height - 2 )+ \
            new_room->pos.y+1;
    // bottom door
    new_room->doors[1]->position->x = rand() % (new_room->width - 2) + \
            new_room->pos.x +1;
    new_room->doors[1]->position->y = new_room->pos.y + new_room->height;
    break;
  case 3:
    new_room->doors[0] = malloc(sizeof(Door));
    new_room->doors[1] = malloc(sizeof(Door));
    new_room->doors[0]->position = malloc(sizeof(Position));
    new_room->doors[1]->position = malloc(sizeof(Position));
    new_room->doors[1]->connected = 0;
    new_room->doors[0]->connected = 0;
    
    // right door
    new_room->doors[0]->position->x = new_room->pos.x + new_room->width -1;
    new_room->doors[0]->position->y = rand() % (new_room->height - 2) + \
            new_room->pos.y+1;

    // // top door-
    new_room->doors[1]->position->x = rand() % (new_room->width - 2) + \
            new_room->pos.x +1;
    new_room->doors[1]->position->y = new_room->pos.y;
    break;
  case 4:
    new_room->doors[0] = malloc(sizeof(Door));
    new_room->doors[1] = malloc(sizeof(Door));
    new_room->doors[0]->position = malloc(sizeof(Position));
    new_room->doors[1]->position = malloc(sizeof(Position));
    new_room->doors[1]->connected = 0;
    new_room->doors[0]->connected = 0;

    // left door
    new_room->doors[0]->position->x = new_room->pos.x;
    new_room->doors[0]->position->y = rand() % (new_room->height - 2 )+ \
            new_room->pos.y+1;
    // right door
    new_room->doors[1]->position->x = new_room->pos.x + new_room->width -1;
    new_room->doors[1]->position->y = rand() % (new_room->height - 2) + \
            new_room->pos.y+1;
    break;
  case 5:
    new_room->doors[0] = malloc(sizeof(Door));
    new_room->doors[1] = malloc(sizeof(Door));
    new_room->doors[0]->position = malloc(sizeof(Position));
    new_room->doors[1]->position = malloc(sizeof(Position));
    new_room->doors[1]->connected = 0;
    new_room->doors[0]->connected = 0;
    // left door
    new_room->doors[0]->position->x = new_room->pos.x;
    new_room->doors[0]->position->y = rand() % (new_room->height - 2 )+ \
            new_room->pos.y+1;
    // top door-
    new_room->doors[1]->position->x = rand() % (new_room->width - 2) + \
            new_room->pos.x +1;
    new_room->doors[1]->position->y = new_room->pos.y;
    break;
  
  default:
    break;
  }
  // // top door-
  // new_room->doors[0]->position.x = rand() % (new_room->width - 2) + \
  //          new_room->pos.x +1;
  // new_room->doors[0]->position.y = new_room->pos.y;

  // // left door
  // new_room->doors[1]->position.x = new_room->pos.x;
  // new_room->doors[1]->position.y = rand() % (new_room->height - 2 )+ \
  //          new_room->pos.y+1;
  
  // // bottom door
  // new_room->doors[2]->position.x = rand() % (new_room->width - 2) + \
  //          new_room->pos.x +1;
  // new_room->doors[2]->position.y = new_room->pos.y + new_room->height;

  // // right door
  // new_room->doors[3]->position.x = new_room->pos.x + new_room->width -1;
  // new_room->doors[3]->position.y = rand() % (new_room->height - 2) + \
  //          new_room->pos.y+1;
  
  
  return new_room;
}

void rooms_setup(Level * level) {

  int x,y;
  //Room ** rooms;
  level->rooms = malloc(sizeof(Room) * 6);

  sprintf(wtomsg,"Creating Rooms for level %d",level->level);
  write_op();
  level->tiles = malloc(sizeof(char **) * MAXROWS);
  level->colors = malloc(sizeof(char **) * MAXROWS);

  for(y=0;y<=MAXROWS;y++) {
    level->tiles[y] = malloc(sizeof(char *) * MAXCOLS);
    level->colors[y] = malloc(sizeof(char *) * MAXCOLS);
    for(x=0;x<=MAXCOLS;x++) {
      level->tiles[y][x] = 0;
      level->colors[y][x] = 0;
    }
  }

  sprintf(wtomsg,"Done Alloc %d",level->level);
  write_op();


  for (x = 0; x < 6; x++)
  {
    level->rooms[x] = create_room(x,4);
    draw_room(level->rooms[x], level);
  }
  


}

int draw_room(Room *room, Level * level) {
  int x,y;

  sprintf(wtomsg,"Drawing Room: x:%d y:%d w:%d h:%d",
  room->pos.x, room->pos.y,room->width,room->height);
  write_op();


  // Draw top and bottom
  for ( x = room->pos.x; x < room->pos.x + room->width; x++)
  {
    put_tile(room->pos.y, x, "-",WHITE, level); // Top
    put_tile(room->pos.y + room->height, x, "-",WHITE, level); // Bottom
  }
  
  // Draw floors and walls
  for (y=room->pos.y + 1;y < room->pos.y + room->height; y++)
  {
    // Draw side walls

    put_tile(y, room->pos.x, "|",WHITE, level); // Left Side
    put_tile(y, room->pos.x+room->width - 1, "|",WHITE, level); // Right Side
    // Draw floor
    for (x = room->pos.x + 1; x < room->pos.x + room->width - 1; x++)
    {
      put_tile(y, x, ".",DEEP_BLUE, level);
    }
    
  }

  // Draw doors
  sprintf(wtomsg,"Adding Doors");
  write_op();
  put_tile(room->doors[0]->position->y,
           room->doors[0]->position->x , "#",YELLOW, level);
  put_tile(room->doors[1]->position->y,
           room->doors[1]->position->x , "#",YELLOW, level);
  // put_tile(room->doors[2]->position.y,
  //          room->doors[2]->position.x , "+",YELLOW);
  // put_tile(room->doors[3]->position.y,
  //          room->doors[3]->position.x , "+",YELLOW);

  

  return 1;
}


void connect_doors(Level * level) {
  int i, j;
  int randomroom, randomdoor;
  int count;

  // The pathfinding algo eats all our memory
  // and I'm not a good enough C programmer to
  // also the random paths look like crap. 

  // room 0 right door to room 1 left door
  path_find(level->rooms[0]->doors[0]->position,
          level->rooms[1]->doors[0]->position, level);
  level->rooms[0]->doors[0]->connected = 1;
  level->rooms[1]->doors[0]->connected = 1;

  // Room 1 Right door to Room 2 Left door
  path_find(level->rooms[1]->doors[1]->position,
          level->rooms[2]->doors[0]->position, level);
  level->rooms[1]->doors[0]->connected = 1;
  level->rooms[2]->doors[0]->connected = 1;

  // Room 2 Right door to Room 5 Top  door
  path_find(level->rooms[2]->doors[1]->position,
          level->rooms[5]->doors[1]->position, level);
  level->rooms[2]->doors[1]->connected = 1;
  level->rooms[5]->doors[1]->connected = 1;
  
  // Room 5 left door to Room 4 right door
  path_find(level->rooms[5]->doors[0]->position,
          level->rooms[4]->doors[1]->position, level);
  level->rooms[4]->doors[1]->connected = 1;
  level->rooms[5]->doors[0]->connected = 1;
  
  // Room 4 left door to Room 3 right door
  path_find(level->rooms[4]->doors[0]->position,
          level->rooms[3]->doors[0]->position, level);
  level->rooms[3]->doors[0]->connected = 1;
  level->rooms[4]->doors[0]->connected = 1;
  
  // Room 3 top door to Room 0 bottom door
  path_find(level->rooms[3]->doors[1]->position,
          level->rooms[0]->doors[1]->position, level);
  level->rooms[3]->doors[1]->connected = 1;
  level->rooms[0]->doors[1]->connected = 1;
  
sprintf(wtomsg,"Done adding doors");
write_op();

  

  // for (i = 0; i < level->number_of_rooms; i++)
  // {
    
  //   for (j = 0; j < level->rooms[i]->number_of_doors; j++)
  //   {
  //     if (level->rooms[i]->doors[j]->connected == 1)
  //     {
  //       continue;
  //     }

  //     count = 0;
  //     while(count < 2) {
  //       // Pick a random room/door target
  //       randomroom = rand() % level->number_of_rooms;
  //       randomdoor = rand() % level->rooms[randomroom]->number_of_doors;

  //       if (level->rooms[randomroom]->doors[randomdoor]->connected == 1 ||
  //           randomroom == i)
  //       {
  //         count++;
  //         continue;
  //       }
  //       sprintf(wtomsg,"connect_doors  %d,%d -> %d,%d",
  //       level->rooms[randomroom]->doors[randomdoor]->position.y,
  //       level->rooms[randomroom]->doors[randomdoor]->position.x,
  //       level->rooms[i]->doors[j]->position.y,
  //       level->rooms[i]->doors[j]->position.x);
  //       write_op();
  //       path_find(level->rooms[randomroom]->doors[randomdoor],
  //                 level->rooms[i]->doors[j], level);
  //       level->rooms[randomroom]->doors[randomdoor]->connected = 1;
  //       level->rooms[i]->doors[j]->connected = 1;
  //       break;
  //     }
  //   }
    
  // }
  
}

void add_stairs(Level * level) {

  int x,y, upstairs, downstairs;
  

  // > downstairs
  downstairs = rand() %6; // there's always 6 rooms
  switch (downstairs)
  {
  case 0:
    x = (rand() % (level->rooms[0]->width - 2)) + level->rooms[0]->pos.x + 1;
    y = (rand() % (level->rooms[0]->height - 2)) + level->rooms[0]->pos.y + 1;
    break;
  case 1:
    x = (rand() % (level->rooms[1]->width - 2)) + level->rooms[1]->pos.x + 1;
    y = (rand() % (level->rooms[1]->height - 2)) + level->rooms[1]->pos.y + 1;
    break;
  case 2:
    x = (rand() % (level->rooms[2]->width - 2)) + level->rooms[2]->pos.x + 1;
    y = (rand() % (level->rooms[2]->height - 2)) + level->rooms[2]->pos.y + 1;
    break;
  case 3:
    x = (rand() % (level->rooms[3]->width - 2)) + level->rooms[3]->pos.x + 1;
    y = (rand() % (level->rooms[3]->height - 2)) + level->rooms[3]->pos.y + 1;
    break;
  case 4:
    x = (rand() % (level->rooms[4]->width - 2)) + level->rooms[4]->pos.x + 1;
    y = (rand() % (level->rooms[4]->height - 2)) + level->rooms[4]->pos.y + 1;
    break;
  case 5:
    x = (rand() % (level->rooms[5]->width - 2)) + level->rooms[5]->pos.x + 1;
    y = (rand() % (level->rooms[5]->height - 2)) + level->rooms[5]->pos.y + 1;
    break;
  
  default:
    break;
  }

  sprintf(wtomsg,"Adding Down Stairs y:%d,x:%d",y,x);
  write_op();
  level->stairs_down.y = y;
  level->stairs_down.x = x;

  //  < upstairs
  if(level->level > 1) {
    upstairs = rand() %6; // there's always 6 rooms
    switch (upstairs)
    {
    case 0:
      x = (rand() % (level->rooms[0]->width - 2)) + level->rooms[0]->pos.x + 1;
      y = (rand() % (level->rooms[0]->height - 2)) + level->rooms[0]->pos.y + 1;
      break;
    case 1:
      x = (rand() % (level->rooms[1]->width - 2)) + level->rooms[1]->pos.x + 1;
      y = (rand() % (level->rooms[1]->height - 2)) + level->rooms[1]->pos.y + 1;
      break;
    case 2:
      x = (rand() % (level->rooms[2]->width - 2)) + level->rooms[2]->pos.x + 1;
      y = (rand() % (level->rooms[2]->height - 2)) + level->rooms[2]->pos.y + 1;
      break;
    case 3:
      x = (rand() % (level->rooms[3]->width - 2)) + level->rooms[3]->pos.x + 1;
      y = (rand() % (level->rooms[3]->height - 2)) + level->rooms[3]->pos.y + 1;
      break;
    case 4:
      x = (rand() % (level->rooms[4]->width - 2)) + level->rooms[4]->pos.x + 1;
      y = (rand() % (level->rooms[4]->height - 2)) + level->rooms[4]->pos.y + 1;
      break;
    case 5:
      x = (rand() % (level->rooms[5]->width - 2)) + level->rooms[5]->pos.x + 1;
      y = (rand() % (level->rooms[5]->height - 2)) + level->rooms[5]->pos.y + 1;
      break;
    
    default:
      break;
    }

    sprintf(wtomsg,"Adding Up Stairs y:%d,x:%d",y,x);
    write_op();
    level->stairs_up.y = y;
    level->stairs_up.x = x;
  } else {
    level->stairs_up.y = 0;
    level->stairs_up.x = 0;
  }

}//////////////////////////////////////////////////////////////////////////
// Initialization
//////////////////////////////////////////////////////////////////////////

void init_screen() {
  // \x27 - TSO Escape Char
  // \x7E - Erase/Write Alternate (EWA)
  // \xC3 - WCC
  location = 0;
  memset(screen,0,MAXSCREEN);
  append_screen("\x27\x7e\xc3",3); 
  // KICKS Documentation says WCC is enough
  //append_screen("\xc3",1); // it wasn't
  sba(1,1);
  append_screen("\x1d\xf0",2);
}

void header(Player * player, int floor) {
  sprintf(wtomsg,"hp: %d (%d), attack: %d, defense: %d",
          player->hp, player->max_health, player->atk, player->def);
  write_op();
  char stat[10];
  sba(1,1);
  change_color(RED);
  append_screen("CICS Dungeon",12);
  sba(1,16); // SBA is ROW, COL
  change_color(WHITE);
  sprintf(stat,"Health: %d/%d",player->hp, player->max_health);
  append_screen(stat,strlen(stat));
  sba(1,33);
  change_color(GREEN);
  sprintf(stat,HEADER_STATS,"Attack",player->atk);
  append_screen(stat,strlen(stat));
  sba(1,46);
  change_color(TURQUOISE);
  sprintf(stat,HEADER_STATS,"Defense",player->def);
  append_screen(stat,strlen(stat));
  sba(1,60);
  change_color(BLUE);
  sprintf(stat,HEADER_STATS,"Level",player->level);
  append_screen(stat,strlen(stat));
  sba(1,72);
  change_color(YELLOW);
  sprintf(stat,HEADER_STATS,"Floor",floor);
  append_screen(stat,strlen(stat));
}

void footer(Level * level) {
  sba(24,1); // Row 24, Col 1
  char clear[80];
  sprintf(clear,"%s%s",
  "                                        ",
  "                                       ");
  append_screen(clear,79);
  sba(24,1); // Row 24, Col 1
  change_color(RED);
  append_screen(level->message,strlen(level->message));
  // I kind of like the message staying on screen for that level
  // sprintf(level->message,"%s%s",
  // "                                        ",
  // "                                       ");
  // append_screen(clear,79);
}

void intro(char * name) {
  // print the intro screen
  init_screen(); 
  sba(1,1);
  change_color(BLUE);
  append_screen("Welcome to CI",13); // KICKS changes CICS to KICKS
  append_screen("CS Dungeon ",12);   // So we have to do this here
  sba(1,25);
  change_color(RED);
  append_screen(name,19);
  sba(3,1);
  change_color(BLUE);
  append_screen("You stand before a dark and ominous dungeon. ",45);
  append_screen("You know that great",19);
  sba(4,1);
  append_screen("danger lurks within, but you are also drawn by"\
                " the promise of",61);
  sba(5,1);
  append_screen("tapes and glory.",16);
  sba(7,1);
  append_screen("You take a deep breath and step inside. ",40);
  append_screen("The door slams shut behind",26); 
  sba(8,1);
  append_screen("you, leaving you in darkness. You can hear the sound of ",56);
  append_screen("giant spiders",13);
  sba(9,1);
  append_screen("scuttling in the shadows.",25);
  sba(11,1);
  append_screen("You draw your sword and make your way forward. ",47);
  append_screen("You don't know what",19);
  sba(12,1);
  append_screen("lies ahead, but you're determined to find out.",46);                    
  sba(14,1);  
  change_color(WHITE);
  append_screen("How to play:",12);
  sba(15,1); 
  change_color(WHITE); 
  append_screen("- ",2);
  change_color(BLUE); 
  append_screen("Use the ",8);
  change_color(YELLOW); 
  append_screen("F1 ",3);
  change_color(BLUE); 
  append_screen("through ",8);
  change_color(YELLOW); 
  append_screen("F4 ",3);
  change_color(BLUE); 
  append_screen("keys for movement",17);
  sba(16,1);  
  change_color(WHITE); 
  append_screen("- ",2);
  change_color(YELLOW); 
  append_screen("F1 ",3);
  change_color(BLUE); 
  append_screen("Left ",5);
  change_color(YELLOW); 
  append_screen("F2 ",3);
  change_color(BLUE); 
  append_screen("Down ",5);
  change_color(YELLOW); 
  append_screen("F3 ",3);
  change_color(BLUE); 
  append_screen("Up ",3);
  change_color(YELLOW); 
  append_screen("F4 ",3);
  change_color(BLUE); 
  append_screen("Right ",6);
  sba(17,1);  
  change_color(WHITE); 
  append_screen("- ",2);
  change_color(YELLOW); 
  append_screen("F9 ",3);
  change_color(BLUE); 
  append_screen("exits the dungeon",18);
  sba(19,1);  
  append_screen("Clearing a floor levels up your character. ",43);
  append_screen("There are weapons '",19);
  change_color(WHITE); 
  append_screen(")",1);
  change_color(BLUE); 
  append_screen("',",2);
  sba(20,1);  
  append_screen("armor '",7);
  change_color(TURQUOISE); 
  append_screen("[",1);
  change_color(BLUE); 
  append_screen("' and potions '",15);
  change_color(PINK); 
  append_screen("!",1);
  change_color(BLUE); 
  append_screen("' to collect. There are also enemies so ",39);
  append_screen("watchout!",9);
  sba(22,1);  
  change_color(GREEN); 
  append_screen("Press ENTER to continue",23);

  EXEC CICS SEND TEXT
    FROM(screen) LENGTH(size_of_screen()+1)
    STRFIELD;

  sprintf(wtomsg,"RGUE - Get Data");
  write_op();

  EXEC KICKS RECEIVE NOHANDLE ;


}
//////////////////////////////////////////////////////////////////////////
// Player
// player.c
//////////////////////////////////////////////////////////////////////////

Player * player_setup() {
    Player * new_player;
    new_player = malloc(sizeof(Player));
    new_player->position = malloc(sizeof(Position));
    // new_player->position->x = 14;
    // new_player->position->y = 14;
    new_player->hp = 20;
    new_player->atk = 1;
    new_player->def = 1;
    new_player->xp = 0;
    new_player->gold = 0;
    new_player->level = 1; // their XP level, not floor
    new_player->max_health = 20;
    return new_player;
}

int place_player(Level * level) {
  if (level->level == 1)
  {
    level->player->position->x = level->rooms[3]->pos.x + 1;
    level->player->position->y = level->rooms[3]->pos.y + 1;
  } else {
    level->player->position->y = level->stairs_up.y;
    level->player->position->x = level->stairs_up.x;
  }
  
}

int sync_stats_between_levels(Game * game) {
  Player * player;
  int i, hp, atk, def, lvl, max;

  player = game->levels[game->current_level]->player;
  hp = player->hp;
  atk = player->atk;
  def = player->def;
  lvl = player->level;
  max = player->max_health;
  

  sprintf(wtomsg,"Current Stats: hp %d atk %d def %d lvl %d",
          hp, atk, def, lvl);
  write_op();

  for (i = 0; i < game->number_of_levels; i++)
  {
    // yes this is hacky but i did this to myself

    game->levels[i]->player->hp = hp;
    game->levels[i]->player->atk = atk;
    game->levels[i]->player->def = def;
    game->levels[i]->player->level = lvl;
    game->levels[i]->player->max_health = max;
  }
  
}

int handle_input(int eibaid, Level * level, Game * game) {

    int i;
    char quit_message[5][19] = {
    "Unfortunate Event",
    "Early Retirement",
    "Honorable Defeat",
    "Epic Fail",
    "Unexpected Twist"
    };


    // We have to use F1-F4 for movement
    // We mirrored the vi format but with F keys
    sprintf(wtomsg,"handle_input: Player location y:%d, x:%d",
    level->player->position->y,level->player->position->x);
    write_op();
    switch (eibaid)  
    {
    case DFHPF1:
      /* LEFT */
      // There is no zeroeth column
      if (check_position(level->player->position->y,
                   level->player->position->x-1,
                   level)) {
        level->player->position->x--;
        sprintf(wtomsg,"LEFT");
        write_op();
      }
      break;
    case DFHPF2:
      /* DOWN */
      if (check_position((level->player->position->y + 1),
                    level->player->position->x,
                    level)) {
        level->player->position->y++;
        sprintf(wtomsg,"DOWN");
        write_op();
      }
      break;
    case DFHPF3:
      /* UP */
      // There is no zeroeth row
      if (check_position((level->player->position->y - 1),
                    level->player->position->x,
                    level)) {
       level->player->position->y--;
      sprintf(wtomsg,"RGUE - GOING UP");
      write_op();
      }
      break;
    case DFHPF4:
      /* RIGHT */
      if (check_position((level->player->position->y),
                    level->player->position->x+1,
                   level)) {
        level->player->position->x++;
        sprintf(wtomsg,"RIGHT");
        write_op();
      }
      break;
    case DFHPF9:
      /* QUIT */

        dead_player(level, quit_message[rand()%6]);

      break;
    
    default:
      break;
    }

    // What if we touched a weapon?
    //weapon

    if (level->player->position->y == level->weapon->position->y &&
        level->player->position->x == level->weapon->position->x &&
        level->weapon->collected == 0)
    {
      // sprintf(wtomsg,"Weapon Player %d,%d Weapon %d,%d collected %d",
      // level->player->position->y,level->player->position->x, 
      //    level->weapon->position->y, level->weapon->position->x,
      //   level->weapon->collected == 0);
      // write_op();
      level->player->atk += level->weapon->item.weapon->attack;
      level->weapon->collected = 1;

      sprintf(level->message,"Obtained '%s' (+%d attack)",
              level->weapon->name,level->weapon->item.weapon->attack);
    }
    //armor
    if (level->player->position->y == level->armor->position->y &&
        level->player->position->x == level->armor->position->x &&
        level->armor->collected == 0)
    {
      level->player->def += level->armor->item.armor->defense;
      level->armor->collected = 1;
      sprintf(level->message,"Obtained '%s' (+%d defense)",
              level->armor->name,level->armor->item.armor->defense);
    }
    //potion
    if (level->player->position->y == level->potion->position->y &&
        level->player->position->x == level->potion->position->x &&
        level->potion->collected == 0)
    {

      if(level->potion->item.potion->health + level->player->hp > \
          level->player->max_health ) {
            level->player->hp = level->player->max_health;
          } else {
            level->player->hp += level->potion->item.potion->health;
          }
      level->potion->collected = 1;
      sprintf(level->message,"Obtained '%s' (+%d healing)",
              level->potion->name,level->potion->item.potion->health);
    }

    // What if we're on stairs?

    // sprintf(wtomsg,"Player y,x %d,%d Stairs Down y,x %d,%d",
    //         level->player->position->y,level->player->position->x,
    //         level->stairs_down.y, level->stairs_down.x);
    // write_op();

    if (level->player->position->y == level->stairs_down.y &&
        level->player->position->x == level->stairs_down.x)
    {
      game->current_level++;
    }

    // sprintf(wtomsg,"Player y,x %d,%d Stairs Down y,x %d,%d",
    //         level->player->position->y,level->player->position->x,
    //         level->stairs_up.y, level->stairs_up.x);
    // write_op();
    
    if (level->player->position->y == level->stairs_up.y &&
        level->player->position->x == level->stairs_up.x)
    {
      game->current_level--;
    }
    

}

int check_position(int y,int x, Level * level) {
  int i;
  sprintf(wtomsg,"Player wants to move to y:%d,x:%d = '%c'",y,x,
                get_char(y,x, level->tiles));
  write_op();
  for (i = 0; i < level->number_of_monsters; i++)
  { 
   if (level->monsters[i]->alive) 
   {  
   sprintf(wtomsg,"Player Position y:%d,x:%d - Monster Position %s y:%d,x:%d",
           level->player->position->y,
           level->player->position->x,
           level->monsters[i]->name,
           level->monsters[i]->position->y,
           level->monsters[i]->position->x);
  write_op();
   }
  }
  
  switch (get_char(y,x,level->tiles) )
  {
  case '.':
  case '+':
  case '#':
    for (i = 0; i < level->number_of_monsters; i++)
    {
        if(level->monsters[i]->alive) {
            // they alive
            // sprintf(wtomsg,"level->monsters[%d]->position->y (%d) == y (%d)"\
            //            "level->monsters[%d]->position->x (%d) == x (%d)",
            //            i, level->monsters[i]->position->y, y,
            //            i, level->monsters[i]->position->x, x);
            // write_op();
            if(level->monsters[i]->position->y == y &&
                level->monsters[i]->position->x == x) {
                    combat(level, level->monsters[i],1);
                
                    if(level->monsters[i]->alive) {
                    return 0;
                }
            }
        }
    } 
    return 1;     
  break;

  default:
    break;
  }
  return 0;
}

void put_player(Level * level) {
  // puts the player '@' to location x/y
  // First set the buffer address
  // then the color
  // Finally the @
  sprintf(wtomsg,"Moving player to %d,%d",
          level->player->position->y, 
          level->player->position->x);
  write_op();
  sba(level->player->position->y, 
      level->player->position->x);
  change_color(NEUTRAL_WHITE);
  append_screen("@",1);
}

void dead_player(Level * level, char * killed_by) {

    int i,j;
    struct dead death;
    memset(&death,0,sizeof(dead));

    sprintf (wtomsg, WTO_MESSAGE, "RGUE - Player Died");
    write_op();
    sprintf (wtomsg, "Name %s", level->player->name);
    write_op();
    memcpy(death.name,level->player->name,17);
    memcpy(death.killed_by,killed_by,strlen(killed_by));


    // sprintf (wtomsg, "Freeing Monsters");
    // write_op();
    

    // for(i=0;i < level->number_of_monsters;i++) {
    //       sprintf (wtomsg, "Freeing Monster %d",i);
    // write_op();
    //   free(level->monsters[i]->position);
    //   free(level->monsters[i]);
    // }

    // sprintf (wtomsg, "Freeing Rooms");
    // write_op();

    // for(i=0;i < level->number_of_rooms;i++) {
    //   for(j=0;j <= level->rooms[i]->number_of_doors;j++ ) {
    //     free(level->rooms[i]->doors[j]);
    //   }
    //   free(level->rooms[i]);
    // }
    // sprintf (wtomsg, "Freeing tiles/colors");
    // write_op();
    for (i=0; i < MAXROWS; i++)
    {
      free(level->tiles[i]);
      free(level->colors[i]);
    }
      free(level->tiles);
      free(level->colors);
    // sprintf (wtomsg, "Freeing Monsters");
    // write_op();
    // free(level->monsters);
    // sprintf (wtomsg, "Freeing Player Position");
    // write_op();
  
    // free(level->player->position);
    // sprintf (wtomsg, "Freeing Player");
    // write_op();
    // free(level->player);
    // sprintf (wtomsg, "Freeing Level");
    // write_op();
    // free(level);
    // sprintf (wtomsg, "Opening DeathPGM");
    // write_op();

      EXEC CICS 
          XCTL PROGRAM("DEATHPGM")
          COMMAREA(death)
          LENGTH(sizeof(death));
}

void killed_all_monsters(Level * level) {
  int x;
    int i,j;
    struct dead death;
    memset(&death,0,sizeof(dead));

  if (level->leveled_up)
  {
    return;
  }
  

  for(x=0;x<level->number_of_monsters;x++) {
    if(level->monsters[x]->alive) {
      break;
    }
  }
  
  if(x == level->number_of_monsters) {
    sprintf(level->message,"Floor Cleared - Level Up!");
    level->player->level++;
    level->player->atk++;
    level->player->def++;
    level->player->max_health += 10;
    level->leveled_up = 1;
    if(level->level == 6) {
      win_screen(level->player->name);
    }
  }

}

//////////////////////////////////////////////////////////////////////////
// Monsters
// monsters.c
//////////////////////////////////////////////////////////////////////////


 int add_monsters(Level * level) {

  sprintf(wtomsg,"Adding monsters");
  write_op();

  int x;

  level->monsters = malloc(sizeof(Monster)*6);
  level->number_of_monsters = 0;

  for (x = 0; x < level->number_of_rooms; x++)
  {
    if (rand() % 2 == 0)
    {
      
      /* Add a monster */
    level->monsters[level->number_of_monsters] = select_monster(level->level);
    set_starting_position(level->monsters[level->number_of_monsters],
                            level->rooms[x], level, x);
      level->number_of_monsters++;
      
      if (level->level == 6)
      { // just a boss in level 7
        break;
      }
    }

    
  }

    sprintf(wtomsg,"Number of monsters: %d",level->number_of_monsters);
    write_op();
  
 }

Monster * select_monster(int level) {

  int monster;

  switch (level)
  {
  case 1:
    // jelly, bat, spider, kobold 
    monster = (rand() % 4) + 1;
    break;
  case 2:
    // jelly, bat, spider, kobold, spider, kobold, owl bear
    monster = (rand() % 6) + 1;
    break;
  case 3:  
    monster = (rand() % 6) + 2;
    break;
  case 4:
    monster = (rand() % 3) + 6;
    break;
  case 5: 
    monster = (rand() % 4) + 6;
    break;
  case 6: 
    monster = 11;
  }


// Monsters:
// j - 1-2 - jelly    - atk - 1 - Blue
// B - 1-2 - bat      - atk - 1 - Red
// s - 1-3 - spider   - atk - 1 - Pink
// k - 1-3 - kobold   - atk - 1 - Yellow
// Y - 2-3 - owl bear - atk - 1 - Yellow
// C - 2-4 - centaur  - atk - 1 - Turquoise
// D - 3-5 - dark elf - atk - 1 - Green
// g - 3-5 - goblin   - atk - 1 - Green
// O - 5-6 - ogres    - atk - 1 - Green
// T - 5-6 - Troll    - atk - 1 - Turq

// char symbol, int health, int attack, 
// int speed, int defense, 
// int pathfinding, char color, char *name

  switch (monster)
  {
  case 1: // jelly
    return create_monster('j',1,1,1,1,1,BLUE,"Blue Jelly");
  break;
  case 2: // bat
    return create_monster('b',2,1,1,1,2,BLUE,"Bat");
  break;
  case 3: // spider
    return create_monster('s',3,2,1,1,1,PINK,"Spider");
  break;
  case 4: // kobold
    return create_monster('k',4,5,1,1,2,YELLOW,"Kobold");
  break;
  case 5: // owl bear
    return create_monster('o',6,6,1,1,2,YELLOW,"Owl Bear");
  break;
  case 6: // centaur
    return create_monster('C',8,8,1,1,2,BLUE,"Centaur");
  break;
  case 7: // dark elf
    return create_monster('D',9,10,1,1,2,BLUE,"Dark Elf");
  break;
  case 8: // goblin
    return create_monster('g',15,10,1,1,2,GREEN,"Goblin");
  break;
  case 9: // Blind Ogre
    return create_monster('O',25,15,1,1,1,PALE_GREEN,"Blind Ogre");
  break;
  case 10: // Troll
    return create_monster('T',40,20,1,1,2,TURQUOISE,"Troll");
  break;
  case 11: // SYSPROG (Boss)
    return create_monster('S',50,25,1,1,2,RED,"SYSPROG");
  break;
  
  }

}
/*

1 Spider
  symbol: X
  levels: 1-3
  health: 2
  attack: 1
  speed: 1
  defense: 1
  pathfinding: 1 (random)

2 Goblin
  symbol: G
  levels: 1-5
  health: 5
  attack: 3
  speed: 1
  defense: 1
  pathfinding: 2 (seeking)

3 Troll
  symbol: T
  levels: 4-6
  health: 15
  attack: 5
  speed: 1
  defense: 1
  pathfinding: 1 (random)

 4 Sysprog
  symbol: S
  levels: 6
  health: 2
  attack: 20
  speed: 1
  defense: 10
  pathfinding: 2 (seeking)

*/

Monster * create_monster(char symbol, int health, int attack, 
                          int speed, int defense, 
                          int pathfinding, char color, char *name)
{
  Monster * new_monster;
  new_monster = malloc(sizeof(Monster));
  new_monster->position = malloc(sizeof(Position));

  new_monster->symbol = symbol;
  new_monster->color = color;
  new_monster->health = health;
  new_monster->attack = attack;
  new_monster->alive =1; 
  new_monster->speed = speed;
  new_monster->name = name;
  new_monster->defense = defense;
  new_monster->pathfinding = pathfinding;
  sprintf(new_monster->string,"%c",symbol);
  
  return new_monster;


}

int set_starting_position(Monster * monster, Room * room, 
                          Level * level, int room_number) {

  monster->position->x = (rand() % (room->width - 2)) + room->pos.x + 1;
  monster->position->y = (rand() % (room->height - 2)) + room->pos.y + 1;
  monster->room_number = room_number;
  sprintf(wtomsg,"Adding Monster %s (%c) Room %d",monster->name,
                  monster->symbol, room_number);
  write_op();
  
  // put_tile(monster->position->y,monster->position->x,
  //           monster->string,monster->color, level);

}

int move_monsters(Level * level) {
  int x;
  for (x = 0; x < level->number_of_monsters; x++)
  {
    if (!level->monsters[x]->alive)
      continue;
    if (level->monsters[x]->pathfinding == RANDOM_BEHAVIOR)
    {
      m_random(level->monsters[x]->position, level,level->monsters[x]);
    } else {
      /* Seeking behavior */
      // check if the player is in the room, if they aren't move random

      if(level->level == 6) {
        find_monster(level->player, level->monsters[x], level);
      }
      else {
        if(in_room(level->rooms[level->monsters[x]->room_number],
                  level->player->position)) {

        m_seek(level->monsters[x]->position, 
                    level->player->position, level,level->monsters[x]);
        } else {
          m_random(level->monsters[x]->position, level,level->monsters[x]);
        }
      }
    }    
    put_monster(level->monsters[x]);
  }
  return 1;
}

int in_room(Room * room, Position * player_position) {
  if (player_position->y > room->pos.y && 
      player_position->y < room->pos.y + room->height &&
      player_position->x > room->pos.x &&
      player_position->x < room->pos.x + room->width)
  {
    // we're in the room!
    return 1;
  }
  return 0;
}

int m_seek(Position * start, Position * destination, 
          Level * level, Monster * monster) {
  
  // left
  if (abs((start->x -1) - destination->x) < \
      abs(start->x - destination->x) && 
      get_char(start->y,start->x - 1, level->tiles) == '.')
    {
      // sprintf(wtomsg,"Left %d,%d", start->y, start->x);
      // write_op();
      if (start->x -1 == destination->x && start->y == destination->y)
      {
        /* combat! */
        combat(level, monster, 2);
      } else {
        start->x = start->x - 1;
      }
     
    // Step right
    } else if (abs((start->x + 1) - destination->x) < \
               abs(start->x - destination->x) &&
               get_char(start->y,start->x + 1, level->tiles) == '.')
    {
      //put_tile(start->y, start->x + 1 , "#",YELLOW);
      // sprintf(wtomsg,"rIGHT %d,%d", start->y, start->x);
      // write_op();
      if (start->x +1 == destination->x && start->y == destination->y)
      {
        /* combat! */
        combat(level, monster, 2);
      } else {
        start->x = start->x + 1;
      }

    // Step Down
    } else if (abs((start->y + 1) - destination->y) < \
               abs(start->y - destination->y) &&
               get_char(start->y + 1,start->x, level->tiles) == '.')
    {

      if (start->x == destination->x && start->y + 1 == destination->y)
      {
        /* combat! */
        combat(level, monster, 2);
      } else {
        start->y = start->y + 1;
      }
      // sprintf(wtomsg,"Down %d,%d", start->y, start->x);
      // write_op();

    
    // Step up
    } else if (abs((start->y - 1) - destination->y) < \
               abs(start->y - destination->y) &&
               get_char(start->y - 1,start->x, level->tiles) == '.')    
    {
      //put_tile(start->y - 1, start->x , "#",YELLOW);
      // sprintf(wtomsg,"uP %d,%d", start->y, start->x);
      // write_op();
      if (start->x == destination->x && start->y -1 == destination->y)
      {
        /* combat! */
        combat(level, monster, 2);
      } else {
        start->y = start->y - 1;;
      }
      

    } else {
      /* do nothing */
    }
    // put_tile(start->y, start->x , "#",YELLOW);
}

void m_random(Position * position, Level * level, Monster * monster) {

  int random;
  random = rand() % 5;

  switch (random)
  {
  case 0:
    /* step up */
    if (get_char(position->y-1,position->x, level->tiles) == '.'){
      if (position->y - 1 == level->player->position->y &&
          position->x == level->player->position->x) {
            combat(level,monster,2);
      } else {
        position->y--;
      }
    }
    break;
  case 1:
    /* step down */
    if (get_char(position->y+1,position->x, level->tiles) == '.'){
      if (position->y + 1 == level->player->position->y &&
          position->x == level->player->position->x) {
            combat(level,monster,2);
      } else {
        position->y++;
      }
    }
    break;
  case 2:
    /* step left */
    if (get_char(position->y,position->x-1, level->tiles) == '.'){

      if (position->y == level->player->position->y &&
          position->x-1 == level->player->position->x) {
            combat(level,monster,2);
      } else {
        position->x--;
      }
    }
    break;
  case 3:
    /* step right */
    if (get_char(position->y,position->x+1, level->tiles) == '.'){
      
      if (position->y == level->player->position->y &&
          position->x+1 == level->player->position->x) {
            combat(level,monster,2);
      } else {
        position->x++;
      }
    }
    break;
  case 4:
    /* step none */
    break;
  
  default:
    break;
  }
}

void put_monster(Monster * monster) {
  // puts the player monster to location x/y
  // First set the buffer address
  // then the color
  // Finally the symbol
  sprintf(wtomsg,"Moving monster %s to %d,%d",
          monster->name,
          monster->position->y, 
          monster->position->x);
  write_op();
  sba(monster->position->y, 
      monster->position->x);
  change_color(monster->color);
  append_screen(monster->string,1);
}

void kill_monster(Monster * monster) {
  sprintf(wtomsg,"%s killed! %d,%d",monster->name,
                  monster->position->y,monster->position->x);
  write_op();
  monster->alive = 0;
}

int combat(Level * level, Monster * monster, int order) {

    int damage;

    sprintf(wtomsg,"Fight! '%s' vs '%s'",level->player->name,monster->name);
    write_op();

    sprintf(wtomsg,"Player Health: %d Monster Health: %d",
            level->player->hp,monster->health);
    write_op();
    if (order = 1)
    {
        /* player attacking */
        sprintf(wtomsg,"Player attacking");
        write_op();

        monster->health -= level->player->atk;
        if (monster->health > 0)
        {
         level->player->hp -= monster->attack;

         if(level->player->hp <=0) 
         {
         dead_player(level,monster->name);
         }
         sprintf(level->message,"%s took %d damage and attacked for %d damage",
                 monster->name,level->player->atk,monster->attack);
        } 
        else 
        {
            kill_monster(monster);
            level->player->xp++;
            sprintf(level->message,"You killed the %s", monster->name);
        }

        
    } else {
        
        /* Monster attacking */
        sprintf(wtomsg,"Monster attacking");
        write_op();

        if (monster->attack >= level->player->def) {
            damage = monster->attack * 2 - level->player->def;
        } else {
            damage = monster->attack * monster->attack / level->player->def;
        }

        level->player->hp -= damage;

        if (level->player->hp > 0)
        {
           monster->health -= level->player->atk; 
        }
        else 
        {
            dead_player(level,monster->name);
        }

         sprintf(level->message,
            "%s attacked for %d damage and you retaliated for %d damage",
            monster->name,monster->attack, level->player->atk);
    }
    
    sprintf(wtomsg,"Player Health: %d Monster Health: %d",
            level->player->hp,monster->health);
    write_op();
    return 1;

}
int path_find(Position * start, Position * end, Level * level) 
{
    sprintf(wtomsg,"Connecting doors (path_find) %d,%d -> %d,%d",
            start->y,start->x, 
            end->y,end->x);
    write_op();
    int x,y,j,i;
    int tempY;

    int ** frontier;
    frontier = malloc((MAXCOLS * MAXROWS) * sizeof(int *));

    int *** camefrom;
    camefrom = malloc(MAXROWS * sizeof(int **) );
    

    int frontier_index = 0;
    int frontier_count = 0;

    for (x = 0; x < (MAXCOLS * MAXROWS); x++)
    {
        frontier[x] = malloc(2* sizeof(int));
    }

    
    for (i = 0; i <= MAXROWS; i++)
    {
        
        camefrom[i] = malloc(sizeof(int *) * 80);
        
        for (j = 0; j <= MAXCOLS; j++)
        {
            camefrom[i][j] = malloc(sizeof(int *)*2);
            camefrom[i][j][0] = -1;
            camefrom[i][j][1] = -1;
        }
        
    }
    // sprintf(wtomsg,"Done Allocating Storage");
    // write_op();
    // add start to camefrom
    // sprintf(wtomsg,"add start to camefrom %d,%d",
    //             start->y,start->x);
    // write_op();
    camefrom[start->y][start->x][0] = -9;
    camefrom[start->y][start->x][1] = -9;

    // sprintf(wtomsg,"Done, Now add start to frontier %d,%d",
    //             start->y,start->x);
    // write_op();
    // add start position to frontier
    add_position_YX(frontier, frontier_count, 
                    start->y, start->x);
    frontier_count++;

    // for (x = 0; x < (MAXCOLS * MAXROWS); x++)
    // {
    //     sprintf(wtomsg,"WTF frontier[%d][0]=%d "\
    //     "frontier[%d][1]=%d",
    //     x,frontier[x][0],x,frontier[x][1]);
    //     write_op();
    // }
    

    // sprintf(wtomsg,"Finding Frotiers");
    // write_op();
    while(frontier_index < frontier_count) {
        y = frontier[frontier_index][0];
        x = frontier[frontier_index][1];
        frontier_index++;

        if (y==end->y && x==end->x)
        {
            break;
        }

        frontier_count = add_neighbors_YX(frontier, camefrom, 
                                         frontier_count, y, x, level, 0);  
        // sprintf(wtomsg,"dONE index %d count:%d",
        //         frontier_count, frontier_index);
        // write_op(); 
    }

    y = end->y;
    x = end->x;

    // sprintf(wtomsg,"Tracing Came froms");
    // write_op();
    while(y != start->y || x != start->x) {
        tempY = y;
        y = camefrom[tempY][x][0];
        x = camefrom[tempY][x][1];
        // sprintf(wtomsg,"Adding path to level y,x %d,%d",y,x);
        // write_op(); 
        level->tiles[y][x] = '#';
        level->colors[y][x] = YELLOW;
    }
    
    // sprintf(wtomsg,"Freeing up memory");
    // write_op();
    // Now we need to free up this memory

        for (x = 0; x < (MAXCOLS * MAXROWS); x++)
    {
        free(frontier[x]);
    }

    
    for (i = 0; i <= MAXROWS; i++)
    {
                
        for (j = 0; j <= MAXCOLS; j++)
        {
            free(camefrom[i][j]);

        }
        
       free(camefrom[i]);
    }
    free(frontier);
    free(camefrom);
    sprintf(wtomsg,"Pathfinding complete");
    write_op();

}

int find_monster(Player * player, Monster * monster, Level * level) 
{
    sprintf(wtomsg,"Finding path to player Monster %d,%d -> %d,%d",
            monster->position->y,monster->position->x, 
            player->position->y,player->position->x);
    write_op();
    int x,y,j,i;
    int tempY;

    int ** frontier;
    frontier = malloc((MAXCOLS * MAXROWS) * sizeof(int *));

    int *** camefrom;
    camefrom = malloc(MAXROWS * sizeof(int **) );
    

    int frontier_index = 0;
    int frontier_count = 0;

    for (x = 0; x < (MAXCOLS * MAXROWS); x++)
    {
        frontier[x] = malloc(2* sizeof(int));
    }

    
    for (i = 0; i <= MAXROWS; i++)
    {
        
        camefrom[i] = malloc(sizeof(int *) * 80);
        
        for (j = 0; j <= MAXCOLS; j++)
        {
            camefrom[i][j] = malloc(sizeof(int *)*2);
            camefrom[i][j][0] = -1;
            camefrom[i][j][1] = -1;
        }
        
    }
    // sprintf(wtomsg,"Done Allocating Storage");
    // write_op();
    // add start to camefrom
    // sprintf(wtomsg,"add start to camefrom %d,%d",
    //             start->y,start->x);
    // write_op();
    camefrom[player->position->y][player->position->x][0] = -9;
    camefrom[player->position->y][player->position->x][1] = -9;

    // sprintf(wtomsg,"Done, Now add start to frontier %d,%d",
    //             start->y,start->x);
    // write_op();
    // add start position to frontier
    add_position_YX(frontier, frontier_count, 
                    player->position->y, player->position->x);
    frontier_count++;

    // for (x = 0; x < (MAXCOLS * MAXROWS); x++)
    // {
    //     sprintf(wtomsg,"WTF frontier[%d][0]=%d "\
    //     "frontier[%d][1]=%d",
    //     x,frontier[x][0],x,frontier[x][1]);
    //     write_op();
    // }
    

    // sprintf(wtomsg,"Finding Frotiers");
    // write_op();
    while(frontier_index < frontier_count) {
        y = frontier[frontier_index][0];
        x = frontier[frontier_index][1];
        frontier_index++;

        if (y==monster->position->y && x==monster->position->x)
        {
            break;
        }

        frontier_count = add_neighbors_YX(frontier, camefrom, 
                                         frontier_count, y, x, level, 1);  
        // sprintf(wtomsg,"dONE index %d count:%d",
        //         frontier_count, frontier_index);
        // write_op(); 
    }

    y = monster->position->y;
    x = monster->position->x;

    // sprintf(wtomsg,"Tracing Came froms");
    // write_op();

      if (player->position->y == camefrom[y][x][0] && 
          player->position->x == camefrom[y][x][1])
      {
        /* combat! */
        combat(level, monster, 2);
      } else {
        monster->position->y = camefrom[y][x][0];
        monster->position->x = camefrom[y][x][1];
      }
    // sprintf(wtomsg,"Freeing up memory");
    // write_op();
    // Now we need to free up this memory

        for (x = 0; x < (MAXCOLS * MAXROWS); x++)
    {
        free(frontier[x]);
    }

    
    for (i = 0; i <= MAXROWS; i++)
    {
                
        for (j = 0; j <= MAXCOLS; j++)
        {
            free(camefrom[i][j]);

        }
        
       free(camefrom[i]);
    }
    free(frontier);
    free(camefrom);
    sprintf(wtomsg,"Pathfinding complete");
    write_op();

}

int add_position_YX(int ** frontier, int frontier_count, int y, int x) {
    frontier[frontier_count][0] = y;
    frontier[frontier_count][1] = x;
}

int position_check(int y, int x, Level * level, int monster) {
    char temp = get_char(y,x,level->tiles);
    if(monster) 
    {
        if (temp == '.' || temp == '#' )
        {
            return 1;
        } else 
        {
            return 0;
        }
    } 
    else 
    {
        if (temp == '.' || temp == '|' || temp == '-')
        {
            return 0;
        } else 
        {
            return 1;
        }
    }
    
    
}

int add_neighbors_YX(int ** frontier, int *** camefrom,
                     int frontier_count, int y, int x, 
                     Level * level, int monster) {
    // sprintf(wtomsg,"add_neighbors_YX count %d y:%d x:%d",
    //         frontier_count,y, x);
    // write_op();
    // North
    if(y > 0 && camefrom[y-1][x][0] < 0 &&
        position_check(y-1,x,level, monster)) {

        add_position_YX(frontier,frontier_count, y-1, x);
        
        camefrom[y-1][x][0] = y;
        camefrom[y-1][x][1] = x;
        frontier_count++; 
    
    // sprintf(wtomsg,"add_neighbors_YX NORTH count %d y:%d x:%d",
    //         frontier_count,y-1, x);
    // write_op();
    } 
    // South

    if(y < MAXROWS && camefrom[y+1][x][0] < 0 &&
       position_check(y+1,x,level,monster)) {

        add_position_YX(frontier,frontier_count, y+1, x);

        camefrom[y+1][x][0] = y;
        camefrom[y+1][x][1] = x;
        
        frontier_count++; 
    
    // sprintf(wtomsg,"add_neighbors_YX SOUTH count %d y:%d x:%d",
    //         frontier_count,y+1, x);
    // write_op();

    }
    // east

    if(x < MAXCOLS && camefrom[y][x+1][0] < 0&&
       position_check(y,x+1,level,monster)) {

        add_position_YX(frontier,frontier_count, y, x+1);

        camefrom[y][x+1][0] = y;
        camefrom[y][x+1][1] = x;
        frontier_count++; 
    
    // sprintf(wtomsg,"add_neighbors_YX EAST count %d y:%d x:%d",
    //         frontier_count,y, x+1);
    // write_op();

    }
    // west

    if(x > 0 && camefrom[y][x-1][0] < 0 &&
       position_check(y,x-1,level, monster)) {
        add_position_YX(frontier,frontier_count, y, x-1);

        camefrom[y][x-1][0] = y;
        camefrom[y][x-1][1] = x;
        frontier_count++; 
    
    // sprintf(wtomsg,"add_neighbors_YX WEST count %d y:%d x:%d",
    //         frontier_count,y, x-1);
    // write_op();

    }
    return frontier_count;
}
void add_items(Level * level) {

    sprintf(wtomsg,"Creating Items");
    write_op();
    int rand_room, y, x, i;
    for (i = 0; i < 3; i++)
    {
        rand_room = rand() % 6;
        y = (rand() % (level->rooms[rand_room]->height - 2)) + \
            level->rooms[rand_room]->pos.y + 1;
        x = (rand() % (level->rooms[rand_room]->width - 2)) + \
            level->rooms[rand_room]->pos.x + 1;

        sprintf(wtomsg,"Adding Item y:%d,x:%d room: %d", y,x,rand_room);
        write_op();
        switch (i)
        {
        case 0:
            sprintf(wtomsg,"Creating Weapon");
            write_op();
            level->weapon = create_sword(y,x,rand()%6+1);
            break;
        case 1:
            sprintf(wtomsg,"Creating Armor");
            write_op();
            level->armor = create_armor(y,x,rand()%6+1);
            break;
        case 2:
            sprintf(wtomsg,"Creating Potion");
            write_op();
            level->potion = create_potion(y,x,rand()%10+10);
            break;
        
        default:
            break;
        }
        /* code */
    }
}


Item * create_sword(int y, int x, int attack) {
    int random_name;
    Item * item;
    item = malloc(sizeof(Item));
    random_name = rand() % 20;
    item->type = WEAPON_TYPE;
    item->item.weapon = malloc(sizeof(Weapon));
    item->item.weapon->attack = attack;
    item->position = malloc(sizeof(Position));
    item->position->y = y;
    item->position->x = x;
    item->color = WHITE;
    item->collected = 0;
    item->symbol = ')';
    strcpy(item->name,weapon_names[random_name]);
    sprintf(wtomsg,"Adding Weapon y:%d,x:%d attack: %d '%s'",
            y,x,attack,item->name);
    write_op();
    return item;
}

Item * create_potion(int y, int x, int health) {
    int random_name;
    Item * item;
    item = malloc(sizeof(Item));
    random_name = rand() % 10;
    item->type = POTION_TYPE;
    strcpy(item->name,potion_names[random_name]);
    item->item.potion = malloc(sizeof(Potion));
    item->item.potion->health = health;
    item->position = malloc(sizeof(Position));
    item->position->y = y;
    item->position->x = x;
    item->collected = 0;
    item->color = PINK;
    item->symbol = '!';
    sprintf(wtomsg,"Adding Potion y:%d,x:%d heals: %d '%s'",
            y,x,health,item->name);
    write_op();
    return item;
}

Item * create_armor(int y, int x, int armor) {
    int random_name;
    Item * item;
    item = malloc(sizeof(Item));
    random_name = rand() % 20;
    item->type = ARMOR_TYPE;
    strcpy(item->name,armor_names[random_name]);
    item->item.armor = malloc(sizeof(Armor));
    item->item.armor->defense = armor;
    item->position = malloc(sizeof(Position));
    item->position->y = y;
    item->position->x = x;
    item->collected = 0;
    item->color = BLUE;
    item->symbol = '[';
    sprintf(wtomsg,"Adding Potion y:%d,x:%d armor: %d '%s'",
            y,x,armor,item->name);
    write_op();
    return item;
}


@@
//LKED.SYSIN DD *
 INCLUDE SKIKLOAD(KIKCOBGL)
 ENTRY @@KSTRT
 NAME  DUNGEON(R)
/*
//CLIST  EXEC PGM=PDSLOAD
//STEPLIB  DD  DSN=SYSC.LINKLIB,DISP=SHR
//SYSPRINT DD  SYSOUT=*
//SYSUT2   DD  DISP=SHR,DSN=SYS2.CMDPROC
//SYSUT1   DD DATA,DLM=@@
./ ADD NAME=DUNGEON
KICKS PCT(2$) PPT(2$)